#X-Generator: crowdin.com
bc.start=\uc2dc\uc791
bg.repeat_control=\ub458\uc0ac\uc774\ubc18\ubcf5
bg.repeat_control.description=\uc2dc\uc791\uac12\uacfc \uc815\ube44\uac12 \uc0ac\uc774\uc5d0 \uc788\ub294 "\ubcc0\uc218" \uc5d0 \ub300\ud55c \uba85\ub839\uc744 \ubc18\ubcf5\ud55c\ub2e4.
bc.end=\uc815\uc9c0
bc.increment=\ub2e8\uacc4
bg.constrain=\uc81c\ud55c
bc.low=\ubcf4\ub2e4\ub0ae\uc740
bc.high=\ubcf4\ub2e4\ub192\uc740
bg.sd_write2=SD \uc5d0 \uae30\ub85d
bg.sd_write=SD \ud50c\ub798\uc2dc\uc4f0\uae30
bg.sd_write_number_int=SD write number Int
bg.sd_return=\ub3cc\uc544\uc634
bg.sd_no_return=\ub3cc\uc544\uc624\uc9c0 \uc54a\uc74c
bg.eeprom_read=EEPROM \uc73c\ub85c\ubd80\ud130\uc77d\uc5b4\uc634
bg.eeprom_write=EEPROM\uc5d0\uae30\ub85d
bg.eeprom_read_int=EEPROM\uc73c\ub85c\ubd80\ud130\uc22b\uc790\uc77d\uc5b4\uc634
bg.eeprom_write_int=EEPROM \uc5d0\uc22b\uc790\uae30\ub85d
bd.storage=\uc800\uc7a5\uacf5\uac04
bc.device_address=\ub514\ubc14\uc774\uc2a4\uc8fc\uc18c
bc.device_address_I2C=\uc8fc\uc18c 0x
bc.register_address=\uc8fc\uc18c\ub4f1\ub85d
bc.watchdog_enable=\uac00\ub2a5
bc.eeprom_address=\uc8fc\uc18c
bc.eeprom_data=\ub370\uc774\ud130
bc.ln=\uc0c8\ub85c\uc6b4 \ub77c\uc778
bc.message=\uba54\uc2dc\uc9c02
bc.print=\uc778\uc1c4
bc.line_number=\ub77c\uc778\#
bc.character_number=char\#


bg.char=A
bd.chars=\ubb38\uc790 \ud14c\uc2a4\ud2b8
bg.not_equal_poly=\!\=
bg.glue_poly=glue
bg.serial_available=\uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc9c1\ub82c \ub370\uc774\ud130
bg.program=\ud504\ub85c\uadf8\ub7a8
bc.setup=\uc14b\uc5c5
bc.par=\uc785\ub825
bc.vecsize=\ud06c\uae30
bc.num=\#
bg.variable_vector=array variable name
bc.position=\uc704\uce58
bg.create_variable_vector=create an array
bg.setter_variable_vector=set an array member

bg.code_head=head
bg.code_setup=setup
bg.code_loop=\uc21c\ud658
bg.serial_read=\uc9c1\ub82c\ud3ec\ud2b8\uc77d\uae30
bd.especial=\ucf54\ub4dc\ube14\ub7ed
bg.not_equal_digital=\!\=
bg.repeat=repeat and count
bc.var=iteration variable name
bg.glue_msg=glue message

# BlockDrawer name
bc.angle=\uac01\ub3c4
bc.base=\uae30\ucd08
bc.condition=test
bc.else=\ub2e4\ub978
bc.exponent=\uc9c0\uc218
bc.from=~\ubd80\ud130
bc.level=\uc218\uc900
bc.max=\ucd5c\ub300
bc.min=min
bc.microseconds=\ub9c8\uc774\ud06c\ub85c\ucd08
bc.milliseconds=\ubc00\ub9ac\ucd08

# BlockConnector label
bc.pin_number=\ud540 \ubc88\ud638
bc.status=\uc0c1\ud0dc
bc.test=\uc2dc\ud5d8
bc.then=\uadf8 \ub2e4\uc74c
bc.to=~\uc5d0\uc11c
bc.value=\uac12
bc.variable=\ubcc0\uc218
bc.frequency=frequency
bc.do=do
bc.motor_channel=motor channel
bc.motor_speed=motor speed


bd.control=\uc81c\uc5b4
bd.dfrobot=DFRobot
bd.number=Variables/Constants
bd.operators=Math Operators
bd.pins=\ud540
bd.seeedstudio=Seeed Studio Grove

bd.communication=Communication

#linksprite
bd.linksprite_LinkerKit=Linker Kit

bd.tinkerkit=TinkerKit
bd.utilities=Generic Hardware
# BlockGenus initlabel
bg.df_lcd_keypad=LCD Keypad
bg.Tinker_Accmeter=\uac00 \uc18d\ub3c4\uacc4
bg.Tinker_Button=\ub2e8\ucd94
bg.Tinker_Hall=\ud640
bg.Tinker_LDR=LDR
bg.Tinker_LED=\ubc1c\uad11 \ub2e4\uc774\uc624\ub4dc
bg.Tinker_LED_pwm=\ubc1c\uad11 \ub2e4\uc774\uc624\ub4dc
bg.Tinker_LinearPotentiometer=LinearPotentiometer
bg.Tinker_Mosfet=Mosfet
bg.Tinker_Mosfet_pwm=Mosfet
bg.Tinker_Relay=\ub9b4\ub808\uc774
bg.Tinker_RotaryPotentiometer=RotaryPotentiometer
bg.Tinker_Servo=\uc11c\ubcf4
bg.Tinker_Thermistor=\uc11c\ubbf8\uc2a4\ud130
bg.Tinker_Tilt=\uae30\uc6b8\uae30
bg.Tinker_Touch=\ud130\uce58
bg.abs=abs
bg.addition=+
bg.and=\uadf8\ub9ac\uace0
bg.cos=cos


bg.delay=delay MILLIS
bg.delay_microseconds=delay MICROS

bg.df_360_degree_rotation_motor=360\ub3c4 \ud68c\uc804 \ubaa8\ud130
bg.df_adjustable_infrared_sensor_switch=\ubcc0\uacbd \uac00\ub2a5\ud55c \uc801\uc678\uc120 \uc13c\uc11c \uc2a4\uc704\uce58
bg.df_analog_ambient_light_sensor=\uc544\ub0a0\ub85c\uadf8 \uad11\uc13c\uc11c
bg.df_analog_gas_sensor=\uc544\ub0a0\ub85c\uadf8 \uac00\uc2a4 \uc13c\uc11c
bg.df_analog_grayscale_sensor=\uc544\ub0a0\ub85c\uadf8 \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c \uc13c\uc11c
bg.df_analog_rotation_sensor_v1=\uc544\ub0a0\ub85c\uadf8 \ud68c\uc804 \uc13c\uc11c V1
bg.df_analog_rotation_sensor_v2=\uc544\ub0a0\ub85c\uadf8 \ud68c\uc804 \uc13c\uc11c V2
bg.df_analog_sound_sensor=\uc544\ub0a0\ub85c\uadf8 \uc0ac\uc6b4\ub4dc \uc13c\uc11c
bg.df_analog_volume_sensor=\uc544\ub0a0\ub85c\uadf8\uc18c\ub9ac\ubcfc\ub968\uc13c\uc11c
bg.df_capacitive_touch_sensor=\uc815\uc804\uc6a9\ub7c9\uc2dd \ud130\uce58 \uc13c\uc11c
bg.df_digital_infrared_motion_sensor=\ub514\uc9c0\ud138 \uc801\uc678\uc120 \ubaa8\uc158 \uc13c\uc11c
bg.df_digital_ir_receiver_module=\ub514\uc9c0\ud138 \uc801\uc678\uc120 \uc218\uc2e0 \ubaa8\ub4c8
bg.df_digital_push_button=\ub514\uc9c0\ud138 \ud478\uc2dc \ubc84\ud2bc
bg.df_digital_viberation_sensor=\ub514\uc9c0\ud138 \uc9c4\ub3d9 \uc13c\uc11c
bg.df_flame_sensor=\ubd88\uaf43 \uc13c\uc11c
bg.df_joystick_module_button=\uc870\uc774\uc2a4\ud2f1 \ubaa8\ub4c8 \ubc84\ud2bc
bg.df_joystick_module_x=\uc870\uc774\uc2a4\ud2f1 \ubaa8\ub4c8 (X \ucd95)
bg.df_joystick_module_y=\uc870\uc774\uc2a4\ud2f1 \ubaa8\ub4c8 (Y \ucd95)
bg.df_led=\ubc1c\uad11\ub2e4\uc774\uc624\ub4dc \ubaa8\ub4c8
bg.df_led_pwm=\ubc1c\uad11\ub2e4\uc774\uc624\ub4dc \ubc1d\uae30
bg.df_line_tracking_sensor=\uc120 \ucd94\uc801 \uc13c\uc11c
bg.df_mma7260_x=3\ucd95 \uac00\uc18d\ub3c4\uacc4 MMA7260 (X \ucd95)
bg.df_mma7260_y=3\ucd95 \uac00\uc18d\ub3c4\uacc4 MMA7260 (Y \ucd95)
bg.df_mma7260_z=3\ucd95 \uac00\uc18d\ub3c4\uacc4 MMA7260 (Z \ucd95)
bg.df_piranha_led=piranga \ubc1c\uad11\ub2e4\uc774\uc624\ub4dc \ubaa8\ub4c8
bg.df_piranha_led_pwm=piranga \ubc1c\uad11\ub2e4\uc774\uc624\ub4dc \ubc1d\uae30
bg.df_pizeo_disk_vibration_sensor=\ud53c\uc5d0\uc870 \ub514\uc2a4\ud06c \uc9c4\ub3d9 \uc13c\uc11c
bg.df_relay=\ub9b4\ub808\uc774
bg.df_servo=\uc11c\ubcf4
bg.df_temperature_sensor=\uc628\ub3c4 \uc13c\uc11c
bg.df_buzzer=\ubd80\uc800
bg.df_buzzer_tone=\ubd80\uc800
bg.df_buzzer_tone_delay=\ubd80\uc800

bg.df_digital_tilt_sensor=\ub514\uc9c0\ud138\uae30\uc6b8\uae30\uc13c\uc11c
bg.df_digital_magnetic_sensor=\ub514\uc9c0\ud138\uc790\uc11d\uc13c\uc11c
bg.df_analog_co_sensor=\uc544\ub0a0\ub85c\uadf8\uc77c\uc0b0\ud654\ud0c4\uc18c\uc13c\uc11c
bg.df_analog_voltage_divider=Analog Voltage Divider
bg.df_analog_mma7361_x=X-Asix of Accelerometer
bg.df_analog_mma7361_y=Y-Asix of Accelerometer
bg.df_analog_mma7361_z=Z-Asix of Accelerometer
bg.df_analog_gp2y0a21=Sharp GP2Y0A21 Distance Sensor
bg.df_analog_moisture=\ud1a0\uc591\uc218\ubd84\uc13c\uc11c

bg.digital-high=\ub192\uc74c
bg.digital-low=\ub0ae\uc74c
bg.digital-off=\ub044\uae30
bg.digital-on=\ucf1c\uae30
bg.division=\u00f7
bg.false=\uac70\uc9d3
bg.glue_sb=glue
bg.glue_sn=glue
bg.dummy=dummy
bg.greater=>
bg.greater_equal=>\=
bg.if=\ub9cc\uc57d
bg.ifelse=\ub9cc\uc57d/\uc544\ub2d8
bg.less=<
bg.less_equal=<\=
bg.loop=\ubc18\ubcf5
bg.subroutine=subroutine
bg.subroutine-ref=subroutine
bg.map=\ub9f5
bg.max=\ucd5c\ub300
bg.message=\uba54\uc2dc\uc9c0
bg.millis=\ubc00\ub9ac
bg.min=\ucd5c\uc800
bg.modulo=%
bg.multiplication=x
bg.not=not
bg.not_equal=\!\=
bg.number=1
bg.number_long=1000000
bg.number_double=3.1415927
bg.number-single=1
bg.number-single-I2C-address=3F
bg.number-single-fixed-parallel=Parallel
bg.or=\ub610\ub294
bg.pin-read-analog=\uc544\ub0a0\ub85c\uadf8 \ud540
bg.pin-read-digital=\ub514\uc9c0\ud138 \ud540
bg.pin-read-digital-pullup=\uc785\ub825\ud480\uc5c5
bg.pin-write-analog=\uc544\ub0a0\ub85c\uadf8 pin \uc124\uc815
bg.pin-write-digital=\ub514\uc9c0\ud138 \ud540 \uc124\uc815
bg.pow=\uc804\uc6d0
bg.random=\ubb34\uc791\uc704
bg.repeat_times=\ubc18\ubcf5
bg.seeed_joystick=\uadf8\ub85c\ube0c \uc5c4\uc9c0\uc190\uac00\ub77d \uc870\uc774\uc2a4\ud2f1
bg.seeed_joystick_button=\uadf8\ub85c\ube0c \uc5c4\uc9c0\uc190\uac00\ub77d \uc870\uc774\uc2a4\ud2f1 \ubc84\ud2bc
bg.watchdog_15ms=WDTO_15MS
bg.watchdog_30ms=WDTO_30MS
bg.watchdog_60ms=WDTO_60MS
bg.watchdog_120ms=WDTO_120MS
bg.watchdog_250ms=WDTO_250MS
bg.watchdog_500ms=WDTO_500MS
bg.watchdog_1s=WDTO_1S
bg.watchdog_2s=WDTO_2S
bg.watchdog_4s=WDTO_4S
bg.watchdog_8s=WDTO_8S
bg.watchdog_setup=\uc6cc\uce58\ub3c5
bg.watchdog_reset=\uc6cc\uce58\ub3c5\ub9ac\uc14b
bg.random_range=\ub79c\ub364


#linksprite
bg.ls_10mmLEDModule=10mm Blue/Green/Yellow/Red LED Module
bg.ls_5mmLEDModule=5mm Blue/Green/Yellow/Red LED Module
bg.ls_AccelerometerModule_x=Accelerometer Module (x-Achse)
bg.ls_AccelerometerModule_y=Accelerometer Module (y-Achse)
bg.ls_AccelerometerModule_z=Accelerometer Module (z-Achse)
bg.ls_ButtonModule=\ubc84\ud2bc\ubaa8\ub4c8
bg.ls_BuzzerModule=\ubd80\uc800\ubaa8\ub4c8
bg.ls_HallSensor=\ud560\uc13c\uc11c
bg.ls_HighPowerLedModule=High Power Led Module
bg.ls_JoystickSensorModule_x=Joystick Sensor Module (x-Achse)
bg.ls_JoystickSensorModule_y=Joystick Sensor Module (y-Achse)
bg.ls_LDRModule=LDR \ubaa8\ub4c8
bg.ls_LEDBar=LED \ubc14
bg.ls_Linear-SlidePotentiometerModule=\uc120\ud615\uc2ac\ub77c\uc774\ub4dc\uc804\uc704\ucc28\ubbf8\ud130\ubaa8\ub4c8
bg.ls_MagneticSwitch=Magnetic Switch
bg.ls_MosfetModule=Mosfet Module
bg.ls_RelayModule=Relay Module
bg.ls_RotaryPotentiometerModule=Rotary Potentiometer Module
bg.ls_RTCModule=RTC Module
bg.ls_SoundSensor=Sound Sensor
bg.ls_ThermalModule=Thermal Module
bg.ls_TiltModule=Tilt Module
bg.ls_TouchSensorModule=TouchSensor Module

bg.serial_println=serial println
bg.serial_print=serial print
bg.servo=\uc11c\ubcf4
bg.servo_prefix=Servo\: 
bg.servo_default=\ucd5c\uae30\uac12
bg.servo_sg90=SG90
bg.servo_mg996r=MG996R
bg.setter_variable_digital=\ub514\uc9c0\ud138 \ubcc0\uc218 \uc124\uc815
bg.setter_variable_number=\uc815\uc218 \ubcc0\uc18c \uc124\uc815
bg.setter_variable_number_unsigned_long=\ud070\uc815\uc218 \ubcc0\uc218 \uc124\uc815
bg.setter_variable_number_double=\uc2ed\uc9c4\uc218 \ubcc0\uc218 \uc124\uc815
bg.sin=\uc0ac\uc778
bg.sqrt=\uc81c\uacf1\uadfc
bg.subtraction=-
bg.tan=\ud0c4\uc820\ud2b8
bg.true=\uc0ac\uc2e4

bg.ultrasonic=\ucd08\uc74c\ud30c
bg.LCD_I2C_Sainsmart_20by4=20by4 I2C  Sainsmart
bg.LCD_I2C_Sainsmart_16by2=16by2 I2C  Sainsmart
bg.LCD_PLL_Sainsmart_16by2=16by2 PLL Sainsmart
bg.LCD_command_clear=\ud074\ub9ac\uc5b4
bg.LCD_command_home=\ud648
bg.LCD_command_lightOn=\ub77c\uc774\ud2b8\ucf2c
bg.LCD_command_lightOff=\ub77c\uc774\ud2b8\ub054
bg.LCD_command_cursorOn=\ucee4\uc11c\ucf2c
bg.LCD_command_cursorOff=\ucee4\uc11c\ub054
bg.LCD_command_blinkOn=\uae5c\ube61\uc784\ucf2c
bg.LCD_command_blinkOff=\uae5c\ube61\uc784\ub054
bg.variable_digital=digital variable name
bg.variable_number=integer variable name
bg.variable_number_unsigned_long=Large integer variable name
bg.variable_number_double='Decimal' variable name
bg.while=\ubc18\ubcf5_While
bg.do_while=do while
bg.wire_isread=read I2C ok?
bg.wire_read=read from I2C
bg.wire_write=write to I2C
bg.wire_write_one_byte=I2C write 1
bg.tone=\ud1a4
bg.tone_time=tone
bg.no_tone=\ud1a4\uc5c6\uc74c
bg.xcj_motor_backward=motor shield backward
bg.xcj_motor_forward=\uc804\ubc29\ubaa8\ud130 \ucc28\ud3d0
bg.xcj_ms_digital_read=Xinchejian digitalRead
bg.xcj_ms_digital_write=Xinchejian digitalWrite

bd.logic=\ud14c\uc2a4\ud2b8



ardublock.file.suffix=Ardublock Program File(*.abp)
ardublock.ui.new=New
ardublock.ui.save=\uc800\uc7a5
ardublock.ui.saveAs=\ub2e4\ub978 \uc774\ub984\uc73c\ub85c \uc800\uc7a5
ardublock.ui.load=\uc5f4\uae30
ardublock.ui.upload=\uc544\ub450\ub2c8\uc624\uc5d0 \uc5c5\ub85c\ub4dc
ardublock.ui.clone=\ud074\ub860
ardublock.ui.add_comment=\ucf54\uba58\ud2b8 \ucd94\uac00
ardublock.ui.delete_comment=\ucf54\uba58\ud2b8 \uc0ad\uc81c
ardublock.ui.organize_blocks=\ubaa8\ub4e0 \ubd88\ub7ed\uc744 \uad6c\uc131
ardublock.ui.create_refer=\ucc38\uc870 \ub9cc\ub4e4\uae30
ardublock.ui.website=\uc6f9\uc0ac\uc774\ud2b8\ub85c \uac00\uae30
ardublock.ui.serialMonitor=\uc2dc\ub9ac\uc5bc \ubaa8\ub2c8\ud130
ardublock.ui.saveImage=\ub2e4\ub978\uc774\ub984\uc73c\ub85c \uc774\ubbf8\uc9c0 \uc800\uc7a5

ardublock.error_msg.digital_var_slot=\ub514\uc9c0\ud138\ubcc0\uc218 \uc2ac\ub86f\uc740 '\ub514\uc9c0\ud138\ubcc0\uc218' \uc774\ub984\uc744 \ucde8\ud574\uc57c\ub9cc \ud55c\ub2e4.\n\ud78c\ud2b8\: \uac15\uc870 \ud45c\uc2dc\ub41c \ubd88\ub7ed\uc5d0 '\ubcc0\uc218'\uc18c\ucf13\uc744 \ubcf4\uc2dc\uc624.
ardublock.error_msg.number_var_slot=\ud45c\uc900\ubcc0\uc218 \uc2ac\ub86f\uc740 \ubc18\ub4dc\uc2dc '\uc815\uc218' \ubcc0\uc218\uba85\uc744 \ucde8\ud574\uc57c\ud55c\ub2e4. \n\ud78c\ud2b8\: \uac15\uc870\ud45c\uc2dc\ub41c \ube14\ub7ed\uc5d0 '\ubcc0\uc218' \uc18c\ucf13\uc744 \ud655\uc778\ud558\uc2dc\uc624.
ardublock.error_msg.long_number_var_slot=Large integer variable slot must take a 'Large Integer' variable name.\nHint\: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.double_number_var_slot=variable slot must take a 'Decimal' variable name.\nHint\: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.char_var_slot=Char variable slot must take a char variable name.\nHint\: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_var_slot='Array variable' slot must take an 'array variable' name.\nHint\: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_size_slot='Array size' slot must take a standard integer constant

ardublock.translator.exception.subroutineNameDuplicated=two or more subroutines have the same name\!
ardublock.translator.exception.noLoopFound=No loop found\!
ardublock.translator.exception.multipleLoopFound=multiple loop block found\!
ardublock.translator.exception.socketNull=A required Value, Variable Name or 'Test' is missing.\nHint\:\: Look for an empty 'socket' in the highlighted block.
ardublock.translator.exception.subroutineNotDeclared=subroutine not declared

message.title.error=\uc624\ub958
message.title.question=\uc9c8\ubb38
message.content.open_unsaved=\uc544\ub450\ube14\ub7ed \ud504\ub85c\uadf8\ub7a8\uc774 \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc800\uc7a5\ud560\uae4c\uc694?
message.content.overwrite=\uae30\uc874\ud30c\uc77c\uc5d0 \ub36e\uc5b4\uc4f8\uae4c\uc694?
message.file_not_found=\ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uac70\ub098, \uc0ac\uc6a9\uad8c\ud55c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.
message.question.newfile_on_workspace_changed=\ud504\ub85c\uadf8\ub7a8\uc774 \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \uc544\ub450\ube14\ub7ed\ud30c\uc77c\uc744 \uc0dd\uc131\ud560\uae4c\uc694?

bc.repeat_times=\uc2dc\uac04

# Descriptions of all Block

bg.program.description=\ub8e8\ud504\uc640 \uc14b\uc5c5\uc744 \uac00\uc9c4 \uc8fc \ud504\ub85c\uadf8\ub7a8
bg.loop.description=Main Program loop without setup


bg.delay.description=Delay for "milliseconds" indicated.\nNOTE\: 1000 millis \= 1 second
bg.if.description=Execute the commands if the "test" is true
bg.ifelse.description=Execute the first set of commands if the "test" is true, otherwise it will do the second set of commands.
bg.while.description=Execute the commands as long as the "test" is true
bg.do_while.description=Execute the list of commands. Then, if 'test' is true, keep on repeating it until 'test' is 'false'
bg.repeat_times.description=Repeat the commands. Stop after "times" repetitions.
bg.subroutine.description=Add a subroutine
bg.subroutine-ref.description=Invoke subroutine
bg.delay_microseconds.description=Delay for "microseconds" indicated. \nNOTE\: 1000000 micros \= 1 second
bg.pin-read-analog.description=Read analog value from pin
bg.pin-read-digital.description=Read digital value from pin
bg.pin-read-digital-pullup.description=set digital pin with internal pullup
bg.pin-write-digital.description=write digital to pin
bg.pin-write-analog.description=write analog to pin
bg.addition.description=Sum of two numbers
bg.subtraction.description=Difference of two numbers
bg.multiplication.description=Product of two numbers
bg.division.description=Quotient of two numbers
bg.random.description=Generate a random number less than the number
bg.map_common.description=map value from [0, 1023] to [0, 255]
bg.map.description=Map value from "from" range to "to" range
bg.constrain.description=Constrain a number between two values
bg.greater.description=True if the first number is greater the second number
bg.less.description=True if the first number is less then the second number
bg.equal.description=True if the first number equals to the scond number
bg.equal_digital.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uc73c\uba74 \uc9c4\uc2e4
bg.greater_equal.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uac70\ub098 \ud06c\uba74 \uc9c4\uc2e4
bg.less_equal.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uac70\ub098 \uc791\uc73c\uba74 \uc9c4\uc2e4
bg.not_equal.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc9c4\uc2e4
bg.not_equal_digital.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc9c4\uc2e4
bg.and.description=\ub450\uac1c\uc758 \uc870\uac74\uc774 \ubaa8\ub450 \uc9c4\uc2e4\uc774\uba74 \uc9c4\uc2e4
bg.or.description=\ud558\ub098 \ub610\ub294 \ub450\uac1c \ubaa8\ub450\uc758 \uc870\uac74\uc774 \uc9c4\uc2e4\uc774\uba74 \uc9c4\uc2e4
bg.not.description=\ubc18\ub300
bg.equal_poly.description=\uccab\ubc88\uc9f8 \ubb38\uc790\uac00 \ub450\ubc88\uc9f8 \ubb38\uc790\uc640 \uac19\uc73c\uba74 \uc9c4\uc2e4
bg.not_equal_poly.description=\uccab\ubc88\uc9f8 \ubb38\uc790\uac00 \ub450\ubc88\uc9f8 \ubb38\uc790\uc640 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc9c4\uc2e4
bg.millis.description=\ub9c8\uc9c0\ub9c9 \ud30c\uc6cc-\uc5c5 \ub610\ub294 \ub9ac\uc14b\uc774\ud6c4 \ubc00\ub9ac\ucd08.\n\ucc38\uace0\: '\ud070\uc815\uc218' \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc2dc\uc624.
bg.true.description=\ubd80\uc6b8 \uc9c4\uc2e4
bg.false.description=\ubd80\uc6b8 \uac70\uc9d3
bg.digital-high.description=\ud540 \ud558\uc774
bg.digital-low.description=\ud540 \ub85c
bg.char.description=\ubb38\uc790 \uc0c1\uc218
bg.number.description=Standard integer constant. 32,768 to +32,767
bg.number_long.description=Large integer constant. 0 to 4,294,967,295
bg.number_double.description='Decimal' number constant. +/- 3.4028235E+38
bg.variable_number.description=Standard integer variable. -32,768 to +32,767
bg.variable_number_unsigned_long.description=Large integer variable name
bg.variable_number_double.description='Decimal' variable name
bg.variable_digital.description=Digital variable
bg.setter_variable_number.description=Set standard integer variable. -32,768 to +32,767
bg.setter_variable_number_unsigned_long.description=Set large integer variable. 0 to 4,294,967,295
bg.setter_variable_number_double.description=Set 'Decimal' variable. +/- 3.4028235E+38
bg.setter_variable_digital.description=Set digital variable
bg.variable_vector.description=Get the value of an array member
bg.create_variable_vector.description=Create an array of standard integers. -32,768 to +32,767
bg.setter_variable_vector.description=Set the value of an array member
bg.setter_variable_char.description=Set a character variable
bg.variable_poly.description=Character variable name
bg.servo.description=Control a servo
bg.servo_sg90.description=Control an SG90 servo
bg.servo_mg996r.description=Control an MG996R servo
bg.servo_default.description=Control a servo
bg.ultrasonic.description=Ultrasonic distance sensor
bg.LCD_I2C_Sainsmart_20by4.description=Sainsmart LCD Display. I2C. 20 Char by 4 Lines
bg.LCD_I2C_Sainsmart_16by2.description=Sainsmart LCD Display. I2C. 16 Char by 2 Lines
bg.LCD_PLL_Sainsmart_16by2.description=Sainsmart LCD Display. Parallel. 16 Char by 2 Lines
bg.LCD_command_clear.description=Clear an LCD display
bg.LCD_command_home.description=LCD display home
bg.LCD_command_lightOn.description=LCD display light on.
bg.LCD_command_lightOff.description=LCD display light off
bg.LCD_command_cursorOn.description=LCD display cursor on.
bg.LCD_command_cursorOff.description=LCD display cursor off
bg.LCD_command_blinkOn.description=LCD display blink on.
bg.LCD_command_blinkOff.description=LCD display blink off
bg.tone.description=Generates a square wave of the specified frequency (and 50%\tduty cycle) on a pin.
bg.tone_time.description=Generates a square wave of the specified frequency (and 50% duty cycle) on a pin.
bg.no_tone.description=Stops the generation of a square wave triggered by tone().
bg.serial_print.description=Send message via Serial port
bg.message.description=Text message
bg.glue_sn.description=Glue number to string
bg.glue_sb.description=Glue boolean to string
bg.glue_poly.description=Glue char to string
bg.wire_write.description=Write data via I2C
bg.wire_read.description=Read data from i2c
bg.wire_isread.description=Is last read from I2C success?
bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_write.description=Write a byte (0-255) to EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_read_int.description=Read an int (+/- 32,767) from EEPROM. NOTE\: DON'T read from consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_write_int.description=Write an int (+/- 32,767) to EEPROM. NOTE\: DON'T write to consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_read_long.description=Read a 'long' (0 - 4,294,967,295) from EEPROM. NOTE\: DON'T read from consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.eeprom_write_long.description=Write a 'long' (0 - 4,294,967,295) to EEPROM. NOTE\: DON'T write to consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.sd_write2.description=Write to SD card
bg.code_loop.description=Add raw codes to loop()
bg.code_head.description=Add raw codes to head
bg.code_setup.description=Add raw codes to setup()
bg.glue_msg.description=Glue a text message
bg.variable_fake.description=Digital Var\t\t\t\t
bg.serial_println.description=Send message via Serial port with a return
bg.Tinker_LED.description=TinkerKit LED
bg.Tinker_LED_pwm.description=TinkerKit LED
bg.Tinker_Mosfet.description=TinkerKit Mosfet
bg.Tinker_Mosfet_pwm.description=TinkerKit Mosfet
bg.Tinker_Relay.description=TinkerKit Relay
bg.Tinker_Servo.description=TinkerKit Servo
bg.Tinker_Button.description=TinkerKit Button
bg.Tinker_Accmeter.description=TinkerKit Accelerometer
bg.Tinker_Hall.description=TinkerKit Hall Sensor
bg.Tinker_LDR.description=TinkerKit LDR
bg.Tinker_LinearPotentiometer.description=TinkerKit Accelerometer
bg.Tinker_RotaryPotentiometer.description=TinkerKit RotaryPotentiometer
bg.Tinker_Thermistor.description=TinkerKit Thermistor
bg.Tinker_Touch.description=TinkerKit Touch Sensor
bg.Tinker_Tilt.description=TinkerKit Tilt
bg.xcj_motor_forward.description=forward
bg.xcj_motor_backward.description=Moving the car backward
bg.xcj_ms_digital_write.description=Write digital signal to Socket
bg.xcj_ms_digital_read.description=Read digital status from socket
bg.df_pizeo_disk_vibration_sensor.description=Vibration Sensor buffers a piezoelectric transducer that responds to strain changes by generating a measurable output\tvoltage change which is proportional to the strength of vibration.
bg.df_analog_ambient_light_sensor.description=The ambient light sensor detects light density.  
bg.df_analog_grayscale_sensor.description=Analog Grayscale Sensor detect the grayscale.
bg.df_flame_sensor.description=Read analog value from pin
bg.df_analog_mma7361_x.description=Read analog value from pin
bg.df_analog_mma7361_y.description=Read analog value from pin
bg.df_analog_mma7361_z.description=Read analog value from pin
bg.df_analog_gp2y0a21.description=Read analog value from pin
bg.df_analog_moisture.description=Read analog value from pin
bg.df_temperature_sensor.description=Read analog value from pin
bg.df_joystick_module_x.description=Read analog value from pin
bg.df_joystick_module_y.description=Read analog value from pin
bg.df_mma7260_x.description=Read analog value from pin
bg.df_mma7260_y.description=Read analog value from pin
bg.df_mma7260_z.description=Read analog value from pin
bg.df_analog_rotation_sensor_v1.description=Read analog value from pin
bg.df_analog_rotation_sensor_v2.description=Read analog value from pin
bg.df_analog_sound_sensor.description=Read analog value from pin
bg.df_analog_volume_sensor.description=Read analog value from pin
bg.df_analog_gas_sensor.description=Read analog value from pin
bg.df_analog_co_sensor.description=Read analog value from pin
bg.df_analog_voltage_divider.description=Read analog value from pin
bg.df_servo.description=set a pin to pwm
bg.df_360_degree_rotation_motor.description=set a pin to pwm
bg.df_led.description=LED Module
bg.df_led_pwm.description=LED Module
bg.df_piranha_led.description=Piranha LED Module
bg.df_piranha_led_pwm.description=Pianha LED Module with brightness level
bg.df_relay.description=Relay Module
bg.df_buzzer.description=Buzzer Module
bg.df_buzzer_tone.description=Generates a square wave of the specified frequency (and 50% duty cycle) on a pin.
bg.df_buzzer_tone_delay.description=Generates a square wave of the specified frequency (and 50%\tduty cycle) on a pin.
bg.df_lcd_keypad.description=lcd block that use liquicrystal
bg.seeed_joystick.description=Read analog value from analog pin
bg.seeed_joystick_button.description=Read analog value from analog pin
bg.seeed_o2_sensor=Gas Sensor(O2)
bg.seeed_uv_sensor=UV Sensor
bg.seeed_single_gyro=Single Axis Analog Gyro
bg.seeed_mq9_sensor=Gas Sensor(MQ9)
bg.seeed_mp3_sensor=Gas Sensor(MQ3)
bg.seeed_vib_sensor=Piezo Vibration Sensor
bg.seeed_loud_sensor=Loudness Sensor
bg.seeed_diff_amp=Differential Amplifier
bg.seeed_ir_temp_sensor=Infrared Temperature Sensor
bg.seeed_ir_proximity_sensor=80cm Infrared Proximity Sensor
bg.seeed_electricity_sensor=Electricity Sensor
bg.seeed_angle_sensor=Rotary Angle Sensor
bg.seeed_sound_sensor=Sound Sensor
bg.seeed_moisture_sensor=Moisture Sensor
bg.seeed_temp_sensor=Sound Sensor

bg.seeed_voltage_divider=Voltage Divider
bg.seeed_flame_sensor=Flame Sensor
bg.seeed_button=Button
bg.seeed_switch=Switch
bg.seeed_ir_refl_sensor=Infrared Reflective Sensor
bg.seeed_heart_rate_sensor=Ear-clip Heart Rate Sensor
bg.seeed_chest_heart_sensor=Chest Strap Heart Rate Sensor
bg.seeed_air_quality_sensor=Air Quality Sensor
bg.seeed_line_finder=Line Finder
bg.seeed_pir_motion_sensor=PIR Motion Sensor
bg.seeed_tilt_switch=Tilt Switch
bg.seeed_push_button=Button
bg.seeed_water_sensor=Water Sensor
bg.seeed_touch_sensor=Touch Sensor
bg.seeed_mag_switch=Magnetic Switch
bg.seeed_ir_dist_int=IR Distance Interrupter

bg.seeed_circle_led=Circular LED
bg.seeed_2coil_relay=2-Coil Latching Relay
bg.seeed_dry_relay=Dry-Reed Relay
bg.seeed_solid_relay=Solid State Relay
bg.seeed_led_strip=LED Strip Driver
bg.seeed_led=LED
bg.seeed_var_led=Variable Color LED
bg.seeed_vib=Vibration Motor
bg.seeed_relay=Relay

bg.seeed_o2_sensor.description=Grove-Gas Sensor (O\u2082) is a kind of sensor to test the oxygen concentration in air, which is based on the principle of the electrochemical cell to the original work. 
bg.seeed_uv_sensor.description=\u2013 UV Sensor is used for detecting the intensity of incident ultraviolet(UV) radiation. 
bg.seeed_single_gyro.description=Signal Axis Analog Gyro is based on an angular velocity sensor that uses the phenomenon of Coriolis force. 
bg.seeed_mq9_sensor.description=Gas Sensor module is useful for gas leakage detecting(in home and industry). It can detect LPG, i-butane, methane, alcohol, Hydrogen, somke and so on. 
bg.seeed_mp3_sensor.description=Gas Sensor module is useful for gas leakage detecting(in home and industry). It can detect LPG, i-butane, methane, alcohol, Hydrogen, somke and so on. 
bg.seeed_vib_sensor.description=Piezo Vibration Sensor is suitable for measurements of flexibility, vibration, impact and touch. 
bg.seeed_loud_sensor.description=Loudness Sensor is designed to detect the loudness of environmental sound. Based on amplifier LM2904 and a built-in microphone, it amplifies and filters the high frequency signal that received from the microphone, and outputs a positive envelop. 
bg.seeed_diff_amp.description=It's designed for precise differential-input amplification
bg.seeed_ir_temp_sensor.description=The Infrared temperature sensor is a non-contact temperature measure model.
bg.seeed_ir_proximity_sensor.description=The 80cm Infrared Proximity Sensor is a General Purpose Type Distance Measuring Sensors, this sensor takes a continuous distance reading and returns a corresponding analog voltage with a range of 10cm (4") to 80cm (30").
bg.seeed_electricity_sensor.description=The Electricity sensor module is based on the TA12-200 current transformer which can change large alternating current into a small amplitude. 
bg.seeed_angle_sensor.description=The potentiometer twig produces analog output between 0 and Vcc (5V DC with Seeeduino) on its D1 connector.
bg.seeed_sound_sensor.description=The Sound sensor module is a simple microphone. 
bg.seeed_moisture_sensor.description=This Moisture Sensor can be used to detect the moisture of soil or judge if there is water around the sensor, let the plants in your garden reach out for human help. 
bg.seeed_temp_sensor.description=The temperature sensor uses a thermistor which returns the ambient temperature in the form of a resistance value, which is then used to alter Vcc (5V with our Seeeduinos). 

bg.seeed_voltage_divider.description=Voltage Divider provides an interface for measuring external voltage, eliminating the need to connect a resistance to input interface.
bg.seeed_flame_sensor.description=Flame Sensor can be used to detect fire source or other light sources of the wavelength in the range of 760nm - 1100 nm.
bg.seeed_button.description=Button
bg.seeed_switch.description=Switch
bg.seeed_ir_refl_sensor.description=Infrared Reflective Sensor utilizes a RPR220 reflective photosensor module to detect color and distance.
bg.seeed_heart_rate_sensor.description=The heart rate measure kit can be used to monitor heart rate of patient and athlete.
bg.seeed_chest_heart_sensor.description=The heart rate measure kit can be used to monitor the heart rate of patients and athletes, meanwhile the result can be displayed on a screen via serial port and saved for analysis.
bg.seeed_air_quality_sensor.description=The sensor is designed for indoor air quality testing. The main gas detected is carbon monoxide, alcohol, acetone, thinner, formaldehyde and other slightly toxic gases.
bg.seeed_line_finder.description=Line finder is designed for line following robotic. It consists two parts - an IR emitting LED and an IR sensitive phototransistor. It can output digital signal to a microcontroller so the robot can reliably follow a black line on a white background, or vice versa.
bg.seeed_pir_motion_sensor.description=when anyone moves in its detecting range, the sensor outputs HIGH on its SIG pin.
bg.seeed_tilt_switch.description=The tilt-switch twig is the equivalent of a button, and is used as a digital input.
bg.seeed_push_button.description=Button
bg.seeed_water_sensor.description=This sensor works by having a series of exposed traces connected to ground and interlaced between the grounded traces are the sens traces. The sensor traces have a weak pull-up resistor of 1 M\u03a9. The resistor will pull the sensor trace value high until a drop of water shorts the sensor trace to the grounded trace.
bg.seeed_touch_sensor.description=It can detect the change in capacitance when a finger is near it.
bg.seeed_mag_switch.description=The magnetic switch is a wonder tool for designers who would like to turn a circuit on and off based on proximity.
bg.seeed_ir_dist_int.description=This IR Distance Interrupter features a high-sensitivity RFR-359F photoreflector to perform distance detection function.

bg.seeed_circle_led.description=it has a florid body with 24 controllable LEDs.
bg.seeed_2coil_relay.description=This module is based on 2-Coil Latching Relay.
bg.seeed_dry_relay.description=Grove-Dry-Reed Relay is a relay module which works through magnetizing the vibration reed via the current in the coils.
bg.seeed_solid_relay.description=Solid State Relay is a non-contact electronic switch module that has relay features.
bg.seeed_led_strip.description=It can help you control the luminance of a single-color LED strip, as well as the color and the luminance of an RGB LED strip through Arduino or Seeeduino.
bg.seeed_led.description=LED is designed for the beginners of Arduino/Seeeduino to monitor controls from digital ports.
bg.seeed_var_led.description=When SIG pin is logic LOW, the RGB LED will show.
bg.seeed_vib.description=It is consist one coin type motor which is a Permanent Magnet coreless DC motor.
bg.seeed_relay.description=The Relay is a digital normally open switch that controls a relay capable of switching much higher voltages and currents than your normal Arduino boards.

bd.DuinoEDU=DuinoEDU Grove Add
bg.DuinoEDU_infrared=Infrared
bg.DuinoEDU_infrared.description=Infrared
bg.DuinoEDU_temp=Temp sensor
bg.DuinoEDU_temp.description=Temp sensor
bg.DuinoEDU_tempPro=Temp sensor Pro
bg.DuinoEDU_tempPro.description=Temp sensor Pro
bg.DuinoEDU_humi=Humi sensor
bg.DuinoEDU_humi.description=Humi sensor
bg.DuinoEDU_humiPro=Humi sensor Pro
bg.DuinoEDU_humiPro.description=Humi sensor Pro
bg.DuinoEDU_Led_Bar=Led Bar
bg.DuinoEDU_Led_Bar.description=Led Bar
bg.DuinoEDU_LCD_I2C_RGB=LCD I2C RGB Backlight
bg.DuinoEDU_LCD_I2C_RGB.description=LCD I2C RGB Backlight
bg.DuinoEDU_LCD_I2C_Backlight=LCD I2C Backlight
bg.DuinoEDU_LCD_I2C_Backlight.description=LCD I2C Backlight
bg.DuinoEDU_LCD_I2C_RGB_Clear=LCD I2C RGB Clear
bg.DuinoEDU_LCD_I2C_RGB_Clear.description=LCD I2C RGB Clear
bg.keyboard=keyboard
bg.keyboard.description=keyboard
bg.keyboard_post=keyboard post
bg.keyboard_post.description=keyboard post
bg.DuinoEDU_Keypad_12_Button=Keypad 12 Button 
bg.DuinoEDU_Keypad_12_Button.description=Keypad 12 Button 
bg.DuinoEDU_Keypad_Post=Keypad Post 
bg.DuinoEDU_Keypad_Post.description=Keypad Post
bg.DuinoEDU_Keypad_Pwd=Keypad Password
bg.DuinoEDU_Keypad_Pwd.description=Keypad Password
bg.DuinoEDU_Digital_Tube=Digital Tube
bg.DuinoEDU_Digital_Tube.description=Digital Tube
bg.DuinoEDU_Digital_Clear=Digital Tube Clear
bg.DuinoEDU_Digital_Clear.description=Digital Tube Clear
bg.DuinoEDU_Display_Digital_Tube=Display on digital tube
bg.DuinoEDU_Display_Digital_Tube.description=Display on digital tube
bg.DuinoEDU_Display_Digital_Tube2=Display on digital tube
bg.DuinoEDU_Display_Digital_Tube2.description=Display on digital tube
bg.DuinoEDU_Oled_I2C=Oled I2C
bg.DuinoEDU_Oled_I2C.description=Oled I2C
bg.DuinoEDU_Oled_Clear=Oled Clear
bg.DuinoEDU_Oled_Clear.description=Oled Clear
bg.DuinoEDU_Driver_I2C_Forward=Forward
bg.DuinoEDU_Driver_I2C_Forward.description=Driver I2C Forward
bg.DuinoEDU_Driver_I2C_Back=Back
bg.DuinoEDU_Driver_I2C_Back.description=Driver I2C Back
bg.DuinoEDU_Driver_I2C_Pivoter=Pivote
bg.DuinoEDU_Driver_I2C_Pivoter.description=Driver I2C Pivote
bg.DuinoEDU_right=Right
bg.DuinoEDU_straight=Straight
bg.DuinoEDU_left=Left
bg.DuinoEDU_Aix_Acc_mesurerX=mesurerX
bg.DuinoEDU_Aix_Acc_mesurerX.description=mesurerX
bg.DuinoEDU_Aix_Acc_mesurerY=mesurerY
bg.DuinoEDU_Aix_Acc_mesurerY.description=mesurerY
bg.DuinoEDU_Aix_Acc_mesurerZ=mesurerZ
bg.DuinoEDU_Aix_Acc_mesurerZ.description=mesurerZ
bg.DuinoEDU_Aix_Acc_mesurerXYZ=mesurerXYZ
bg.DuinoEDU_Aix_Acc_mesurerXYZ.description=mesurerXYZ
bg.DuinoEDU_Aix_Acc_mesurerVariation=Variation
bg.DuinoEDU_Aix_Acc_mesurerVariation.description=Variation
bg.DuinoEDU_Ultrasonic=Ultrasonic
bg.DuinoEDU_Ultrasonic.description=Ultrasonic
bg.DuinoEDU_Partie_Emetteur=Emetteur
bg.DuinoEDU_Partie_Emetteur.description=Emetteur
bg.DuinoEDU_Partie_Recepteur=Recepteur
bg.DuinoEDU_Partie_Recepteur.description=Recepteur

bc.DuinoEDU_Brightness=Brightness
bc.DuinoEDU_Display=Display
bg.DuinoEDU_On_digit1=1
bg.DuinoEDU_On_digit2=2
bg.DuinoEDU_On_digit3=3
bg.DuinoEDU_On_digit4=4
bc.DuinoEDU_On_digit=On digit
bc.DuinoEDU_On_digit1=On digit1
bc.DuinoEDU_On_digit2=On digit2
bc.DuinoEDU_On_digit3=On digit3
bc.DuinoEDU_On_digit4=On digit4
bc.DuinoEDU_Display_Point=Display Point
bg.DuinoEDU_setSerialInfosOn=ON
bg.DuinoEDU_setSerialInfosOff=OFF
bc.DuinoEDU_serial_display=Display on serial

bg.ls_10mmLEDModule.description=10mm Blue/Green/Yellow/Red LED Module
bg.ls_5mmLEDModule.description=5mm Blue/Green/Yellow/Red LED Module
bg.ls_AccelerometerModule_x.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_AccelerometerModule_y.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_AccelerometerModule_z.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_ButtonModule.description=Button Module
bg.ls_BuzzerModule.description=Buzzer Module
bg.ls_HallSensor.description=Hall Sensor
bg.ls_HighPowerLedModule.description=High Power Led Module
bg.ls_JoystickSensorModule_x.description=Joystick Sensor Module
bg.ls_JoystickSensorModule_y.description=Joystick Sensor Module
bg.ls_LDRModule.description=LDR Module
bg.ls_LEDBar.description=LED Bar
bg.ls_Linear-SlidePotentiometerModule.description=Linear/Slide Potentiometer Module
bg.ls_MagneticSwitch.description=Magnetic Switch
bg.ls_MosfetModule.description=Mosfet Module
bg.ls_RelayModule.description=Relay Module
bg.ls_RotaryPotentiometerModule.description=Rotary Potentiometer Module
bg.ls_RTCModule.description=RTC Module
bg.ls_SoundSensor.description=Sound Sensor
bg.ls_ThermalModule.description=Thermal Module
bg.ls_TiltModule.description=Tilt Module
bg.ls_TouchSensorModule.description=Touch Sensor Module
bg.random_range.description=Generate random number between min and (max - 1)

bg.panda_i1=panda I1
bg.panda_i2=panda I2
bg.panda_i3=panda I3
bg.panda_i4=panda I4
bg.panda_i5=panda I5
bg.panda_i6=panda I6

bg.panda_o1=panda O1
bg.panda_o2=panda O2
bg.panda_o3=panda O3
bg.panda_o4=panda O4
bg.panda_o5=panda O5
bg.panda_o6=panda O6

bd.network=Networking
bg.bleshield=BLE Shield
bg.bleshield.description=BLE Shield for Bluetooth Communication
bg.bleshield_available=BLE Shield Data Available?
bg.bleshield_read_poly=read from BLE Shield

bd.adafruit.description=Adafruit Motorshield

bd.makeblock=Makeblock
bc.shutter_state=Action
bc.port_number=PORT_\#
bc.motor_number=M\#
bc.command_number=Type
bc.speed_number=Speed
bc.acceleration_number=Acceler
bc.moveTo_number=MoveTo
bc.angle_number=Angle
bc.input_data=Data
bc.device_number=Device
bc.output_data=Data
bc.stepper_finish=Finish
bc.me_key_down=KeyDown
bc.me_key_up=KeyUp
bg.me_port_1=PORT 1
bg.me_port_1.description=Me Base Shield Port
bg.me_port_2=PORT 2
bg.me_port_3=PORT 3
bg.me_port_4=PORT 4
bg.me_port_5=PORT 5
bg.me_port_6=PORT 6
bg.me_port_7=PORT 7
bg.me_port_8=PORT 8
bg.me_motor_1=M1
bg.me_motor_1.description=Me Base Shield DC Motor Port
bg.me_motor_2=M2
bg.me_shutter_1=Shot On
bg.me_shutter_1.description=Me Shutter Action
bg.me_shutter_2=Shot Off
bg.me_shutter_3=Focus On
bg.me_shutter_4=Focus Off
bg.me_ultrasonic_sensor.description=return distance between Object to Sensor.
bg.me_linefinder.description=return 0-3 for Left And Right Side State.
bg.me_limitswitch.description=It sends a signal to the controller when it is triggered. 
bg.me_shutter.description=It sends a signal to the DSLR Camera for shot and focus.
bg.me_motordriver.description=Motor can use M1,M2,Port_1 and Port_2.
bg.me_servodriver.description=Servo can use Port_1 and Port_2,device can use 1 and 2.
bg.me_stepper_motor.description=Mini stepper motor driver base on A4988.Compatible with 4 and 6 wire stepper motors.
bg.me_infraredreceiver.description=Receive Data from Infrared Controller
bg.me_bluetooth_read.description=Bluetooth Read Byte Data
bg.me_bluetooth_write.description=Bluetooth Write Byte Data
bg.me_bluetooth_commands.description=Commands Parser For Android App's Communication.  
bg.me_bluetooth_command.description=return (0\:module,1\:device ID,2\:mode,3\:port,4\:value)

#workshop blocks 
bd.workshop=Workshop template
bg.ws_setting=Setting
bg.ws_setting.description=setup a robot
bg.ws_go_forward=Go
bg.ws_go_forward.description=go forward
bg.ws_go_backward=Back
bg.ws_go_backward.description=go backward
bg.ws_stop=Stop
bg.ws_stop.description=stop moving
bg.ws_turn_left=Turn left
bg.ws_turn_left.description=turn left
bg.ws_turn_right=Turn Right
bg.ws_turn_right.description=turn right
bg.ws_go_forward_left=Go Left
bg.ws_go_forward_left.description=go forward left
bg.ws_go_forward_right=Go Right
bg.ws_go_forward_right.description=go forward right
bg.ws_go_backward_left=Back Left
bg.ws_go_backward_left.description=go back left
bg.ws_go_backward_right=Back Right
bg.ws_go_backward_right.description=go back right
bg.ws_light=Light
bg.ws_light.description=stop moving
bg.ws_scan=Scan
bg.ws_scan.description=Scan an obstacle
bg.ws_music=Music
bg.ws_music.description=play music
bg.ws_wireless=Wrieless
bg.ws_wireless.description=Wireless
bg.ws_danger=In Danger
bg.ws_danger.description=is robot in danger?
bg.ws_binoculars=Binoculars
bg.ws_binoculars.description=Binoculars

#InsectBot blocks


##iDrawing blocks
bd.iDrawing=4Drawing
bg.led_mode_flash=Flash
bg.led_mode_flash.description=Flashing
bg.led_mode_fade=Fade
bg.led_mode_fade.description=Fading
bg.port_pin_name=5
bg.port_pin_name.description=Pin Name(5,6,9,10,11, A0,A1,A2,A3,A4,A5, UART,I2C)

bg.trigger_greater=>
bg.trigger_greater.description=>
bg.trigger_less=<
bg.trigger_less.description=<

bg.player_mode_random=Random
bg.player_mode_random.description=play song randomly

bg.player_mode_single=Single
bg.player_mode_single.description=play the specified song

bg.output_mode_low=Low
bg.output_mode_low.description=Low lever
bg.output_mode_high=High
bg.output_mode_high.description=High lever

bg.output_mode_lowpulse=Low Pulse
bg.output_mode_lowpulse.description=Low pulse

bg.output_mode_highpulse=High Pulse
bg.output_mode_highpulse.description=High pulse


#
bg.iDrawing_set_para=Set 4Drawing
bg.iDrawing_set_para.description=Set parameters in setup
bg.iDrawing_run=Run 4Drawing  
bg.iDrawing_run.description=Running in loop


bg.iDrawing_rule_start=Start
bg.iDrawing_rule_start.description=Start Rule

bg.iDrawing_rule_stop=Stop
bg.iDrawing_rule_stop.description=Stop Rule

bg.iDrawing_rule_sleep=Sleep
bg.iDrawing_rule_sleep.description=System go to sleep state

#
bg.iDrawing_trigger_time=Time
bg.iDrawing_trigger_time.description=Time

bg.iDrawing_trigger_dpin=Digital input
bg.iDrawing_trigger_dpin.description=digital input

bg.iDrawing_trigger_apin=Analog input
bg.iDrawing_trigger_apin.description=analog input


bc.pin_name=Pin Name
bc.wake_condition=Wake condition
bc.duration=Duration(5-180s)
bc.rules=Rules
bc.trigger_logic=Logic
bc.analog_value=Value(0-100)
bc.digital_status=Status




bc.trigger=Trigger
bc.actuator=Actuator


bc.time=Second

#
bg.iDrawing_actuator_led=LED
bg.iDrawing_actuator_led.description=LED

bg.iDrawing_actuator_playermini=Player
bg.iDrawing_actuator_playermini.description=DFPlayer Mini

bg.iDrawing_actuator_dpin=Digital Output
bg.iDrawing_actuator_dpin.description=digital output


bc.mode=Mode
bc.period=Period(ms)
bc.songname=Song

bg.testdatablock=test
bg.testdatablock.description=test



#legacy support
bg.loop1=loop
bg.loop1.description=loop
bg.loop2=loop
bg.loop2.description=loop
bg.loop3=loop
bg.loop3.description=loop

# littlebits 
bd.littlebits=LittleBits
bg.little_bits_bendsensor=BendSensor
bg.little_bits_bendsensor.description=This is BendSensor
bg.little_bits_button=Button
bg.little_bits_button.description=This is Button
bg.little_bits_dimmer=Dimmer
bg.little_bits_dimmer.description=This is Dimmer
bg.little_bits_lightsensor=LightSensor
bg.little_bits_lightsensor.description=This is LightSensor
bg.little_bits_lighttrigger=LightTrigger
bg.little_bits_lighttrigger.description=This is LightTrigger
bg.little_bits_microphone=Microphone
bg.little_bits_microphone.description=This is Microphone
bg.little_bits_motiontrigger=MotionTrigger
bg.little_bits_motiontrigger.description=This is MotionTrigger
bg.little_bits_pressuresensor=PressureSensor
bg.little_bits_pressuresensor.description=This is PressureSensor
bg.little_bits_pulse=Pulse
bg.little_bits_pulse.description=This is Pulse
bg.little_bits_remotetrigger=RemoteTrigger
bg.little_bits_remotetrigger.description=This is RemoteTrigger
bg.little_bits_rollerswitch=RollerSwitch
bg.little_bits_rollerswitch.description=This is RollerSwitch
bg.little_bits_slidedimmer=SlideDimmer
bg.little_bits_slidedimmer.description=This is SlideDimmer
bg.little_bits_slideswitch=SlideSwitch
bg.little_bits_slideswitch.description=This is SlideSwitch
bg.little_bits_soundtrigger=SoundTrigger
bg.little_bits_soundtrigger.description=This is SoundTrigger
bg.little_bits_timeout=TimeOut
bg.little_bits_timeout.description=This is TimeOut
bg.little_bits_toggleswitch=ToggleSwitch
bg.little_bits_toggleswitch.description=This is ToggleSwitch
bg.little_bits_mix=mix
bg.little_bits_mix.description=This is mix
bg.little_bits_oscillator=oscillator
bg.little_bits_oscillator.description=This is oscillator
bg.little_bits_random=random
bg.little_bits_random.description=This is random
bg.little_bits_bargraph=Bargraph
bg.little_bits_bargraph.description=This is Bargraph
bg.little_bits_brightled=BrightLED
bg.little_bits_brightled.description=This is BrightLED
bg.little_bits_dcmotor=DCMotor
bg.little_bits_dcmotor.description=This is DCMotor
bg.little_bits_fan=Fan
bg.little_bits_fan.description=This is Fan
bg.little_bits_ir_led=IR_LED
bg.little_bits_ir_led.description=This is IR_LED
bg.little_bits_led=LED
bg.little_bits_led.description=This is LED
bg.little_bits_lightwire=Lightwire
bg.little_bits_lightwire.description=This is Lightwire
bg.little_bits_longled=LongLED
bg.little_bits_longled.description=This is LongLED
bg.little_bits_number=Number
bg.little_bits_number.description=This is Number
bg.little_bits_rgbled=RGBLED
bg.little_bits_rgbled.description=This is RGBLED
bg.little_bits_uvled=UVLED
bg.little_bits_uvled.description=This is UVLED
bg.little_bits_vibration_motor=Vibration_Motor
bg.little_bits_vibration_motor.description=This is Vibration_Motor
bg.little_bits_synthspeaker=synthspeaker
bg.little_bits_synthspeaker.description=This is synthspeaker


