# BlockDrawer name

bd.control=Control
bd.dfrobot=DFRobot
bd.list=List
bd.loop=Loop
bd.number=Number / Constant
bd.operators=Operators
bd.pins=Pin
bd.procedure=Procedure
bd.seeedstudio=Seeedstudio Grove
bd.serial=String / Serial
bd.time=Time
bd.tinkerkit=TinkerKit Blocks
bd.utilities=Utilities
bd.variables=Global Variable
bd.champo=CHAMPOL
bd.LCD=LCD
bd.L298=L298

# BlockConnector label
bc.angle=angle [°]
bc.base=base
bc.buffer=buffer
bc.condition=condition
bc.else=else
bc.exponent=exponent
bc.frequency=frequency
bc.from=from
bc.level=level
bc.line_number=line#
bc.max=max
bc.message=message
bc.microseconds=[µs]
bc.milliseconds=[ms]
bc.min=min
bc.priority=priority
bc.pin_number=pin#
bc.status=status
bc.test=test
bc.then=then
bc.timeout=timeout [µs]
bc.to=to
bc.value=value
bc.variable=variable
bc.L298Control= Control
bc.L298Motor=Motor
bc.L298Speed=Speed
bc.L298Delay=Delay
bc.L298Increment=Increment
bc.L298Time=Time
bc.L298Sens=Direction
bc.L298Min=Mini
bc.L298Max=Maxi
bc.L298Ramp=Ramp

# BlockGenus initlabel
bg.L298Init=Init L298
bg.L298Speed=Speed Control L298
bg.L298Ramp=Ramp Control L298
bg.L298Ramp2=Ramp Control L298 (Time)
bg.L298Stop=Stop Motor L298
bg.Tinker_Accmeter=Accelerometer
bg.Tinker_Button=Button
bg.Tinker_Hall=Hall
bg.Tinker_I0=I0
bg.Tinker_I1=I1
bg.Tinker_I2=I2
bg.Tinker_I3=I3
bg.Tinker_I4=I4
bg.Tinker_I5=I5
bg.Tinker_LDR=LDR
bg.Tinker_LED=LED
bg.Tinker_LED_pwm=LED
bg.Tinker_LinearPotentiometer=LinearPotentiometer
bg.Tinker_Mosfet=Mosfet
bg.Tinker_Mosfet_pwm=Mosfet
bg.Tinker_O0=O0
bg.Tinker_O1=O1
bg.Tinker_O2=O2
bg.Tinker_O3=O3
bg.Tinker_O4=O4
bg.Tinker_O5=O5
bg.Tinker_Relay=Relay
bg.Tinker_RotaryPotentiometer=RotaryPotentiometer
bg.Tinker_Servo=Servo
bg.Tinker_Thermistor=Thermistor
bg.Tinker_Tilt=Tilt
bg.Tinker_Touch=Touch
bg.abs=abs
bg.addition=+
bg.add-to-list=add to
bg.agent=agent
bg.all=All
bg.and=and
bg.assignment==
bg.bitwise_not=~
bg.bitwise_and=&
bg.bitwise_or=|
bg.bitwise_xor=^
bg.bitwise_left=<<
bg.bitwise_right=>>
bg.break=Break
bg.caller=caller
bg.compound_addition=+=
bg.compound_subtraction=-=
bg.compound_multiplication=*=
bg.compound_division=/=
bg.compound_bitwise_and=&=
bg.compound_bitwise_or=|=
bg.compound_assignment==
bg.constrain=constrain
bg.continue=Continue
bg.cos=cos
bg.delay=Delay
bg.delay_microseconds=delay
bg.detach_interrupt=Detach Interrupt
bg.df_360_degree_rotation_motor=360 degree rotation motor
bg.df_adjustable_infrared_sensor_switch=Adjustable Infrared Sensor Switch
bg.df_analog_ambient_light_sensor=Analog Ambient Light Sensor
bg.df_analog_gas_sensor=Analog Gas Sensor
bg.df_analog_grayscale_sensor=Analog Grayscale Senor
bg.df_analog_rotation_sensor_v1=Analog Rotation Sensor V1
bg.df_analog_rotation_sensor_v2=Analog Rotation Sensor V2
bg.df_analog_sound_sensor=Analog Sound Sensor
bg.df_capacitive_touch_sensor=Capacitive Touch Sensor
bg.df_digital_infrared_motion_sensor=Digital Infrared Motion Sensor
bg.df_digital_ir_receiver_module=Digital IR Receiver Module
bg.df_digital_push_button=Digital Push Button
bg.df_digital_viberation_sensor=Digital Vibration Sensor
bg.df_flame_sensor=Flame Sensor
bg.df_joystick_module_button=JoyStick Module Button
bg.df_joystick_module_x=Joystick Module (Axis-X)
bg.df_joystick_module_y=Joystick Module (Axis-Y)
bg.df_led=LED Module
bg.df_led_pwm=LED with brightness
bg.df_line_tracking_sensor=Line Tracking Sensor
bg.df_mma7260_x=Triple Axis Accelerometer MMA7XXX (Axis-X)
bg.df_mma7260_y=Triple Axis Accelerometer MMA7XXX (Axis-Y)
bg.df_mma7260_z=Triple Axis Accelerometer MMA7XXX (Axis-Z)
bg.df_piranha_led=piranha LED Module
bg.df_piranha_led_pwm=piranha LED with brightness
bg.df_pizeo_disk_vibration_sensor=Piezo Disk Vibration Sensor
bg.df_relay=Relay
bg.df_servo=DFRobot Servo
bg.df_temperature_sensor=Temperature Sensor
bg.df_buzzer=DFRobot Buzzer
bg.df_buzzer_tone=DFRobot Buzzer
bg.df_buzzer_tone_delay=DFRobot Buzzer
bg.df_lcd_keypad=LCD Display
bg.df_lcd=LCD Display
bg.df_lcd_clear= LCD Clear
bg.df_lcd_set_cursor= LCD Set Cursor
bg.def_string=Def String
bg.def_byte_array=Def Byte Array
bg.digital-high=HIGH
bg.digital-low=LOW
bg.digital-off=OFF
bg.digital-on=ON
bg.digital-change=CHANGE
bg.digital-rising=RISING
bg.digital-falling=FALLING
bg.digital-normal=NORMAL
bg.division=\u00f7
bg.dowhile=Do
bg.buffer=buffer
bg.equal===
bg.false=FALSE
bg.first=first
bg.for=for
bg.get-list-item=get
bg.getter=getter
bg.global-var-boolean=G_bool
bg.global-var-boolean-list=G_boolist
bg.global-var-number=G_number
bg.global-var-number-list=G_numbist
bg.global-var-string=G_string
bg.global-var-string-list=G_strist
bg.greater=>
bg.greater_equal=>=
bg.if=if
bg.ifelse=if/else
bg.inc=inc
bg.interrupt=Start interrupts
bg.length=length
bg.less=<
bg.less_equal=<=
bg.list=list
bg.loop=loop
bg.loop2=loop
bg.loop//=loop//
bg.map=map
bg.map_common=map [0, 1024] to [0, 255]
bg.max=max
bg.message=message
bg.millis=millis
bg.micros=micros
bg.min=min
bg.modulo=%
bg.multiplication=x
bg.namer=namer
bg.next
bg.no_interrupt=Stop interrupts
bg.not=not
bg.not_equal=!=
bg.number=1
bg.number2=23
bg.or=or
bg.output=output
bg.pin_00=0
bg.pin_01=1
bg.pin_02=2
bg.pin_03=3
bg.pin_04=4
bg.pin_05=5
bg.pin_06=6
bg.pin_07=7
bg.pin_08=8
bg.pin_09=9
bg.pin_10=10
bg.pin_11=11
bg.pin_12=12
bg.pin_13=13
bg.pin_14=14
bg.pin_15=15
bg.pin_16=16
bg.pin_17=17
bg.pin_18=18
bg.pin_19=19
bg.pin_A0=0
bg.pin_A1=1
bg.pin_A2=2
bg.pin_A3=3
bg.pin_A4=4
bg.pin_A5=5
bg.pin_int0=2
bg.pin_int1=3
bg.pin_pwm3=3
bg.pin_pwm5=5
bg.pin_pwm6=6
bg.pin_pwm9=9
bg.pin_pwm10=10
bg.pin_pwm11=11
bg.pin-read-analog=get analog pin
bg.pin-read-digital=get digital pin
bg.pin-write-analog=set analog pin
bg.pin-write-digital=set digital pin
bg.pow=^
bg.procedure=Proc
bg.procedure_interrupt=ProcInt
bg.proc-param-number=nombre
bg.proc-param-boolean=booleen
bg.proc-param-string=texte
bg.proc-param-list=liste
bg.pulsein=pulseIn
bg.random=random
bg.repeat=for
bg.resume=Start
bg.return=return
bg.rien=
bg.seeed_joystick=Grove Thumb Joystick
bg.seeed_joystick_button=Grove Thumb Joystick Button
bg.serial_println=Println
bg.serial_print=Print
bg.serial_ln=Serial new line
bg.serial_var_print=Serial Var Print
bg.serial_read=Serial read
bg.serial_receive=Serial reveive message
bg.serial_receive2=Serial reveive message2
bg.serial_send=Serial send
bg.servo=Servo
bg.set_digital_assignment=Set =
bg.set_digital_bitwiseand=Set &=
bg.set_digital_bitwiseor=Set |=
bg.set_number_assignment=Set =
bg.set_number_addition=Set +=
bg.set_number_subtraction=Set -=
bg.set_number_multiplication=Set *=
bg.set_number_division=Set /=
bg.set_number_bitwiseand=Set &=
bg.set_number_bitwiseor=Set |=
bg.set_var_digital=set
bg.set_var_number=set
bg.setter=setter
bg.setter_variable_digital=set digital
bg.setter_variable_number=set number
bg.sin=sin
bg.sqrt=sqrt
bg.subtraction=-
bg.suspend=Stop
bg.switch=switch
bg.tan=tan
bg.text=text
bg.def_text=text
bg.text_append=+
bg.text_equal===
bg.true=TRUE
bg.ultrasonic=ultrasonic
bg.variable_digital=digital var name
bg.variable_number=number var name
bg.while=while
bg.wire_isread=I2C read ok?
bg.wire_read=I2C Read
bg.wire_write=I2C Write
bg.tone=tone
bg.tone_time=tone
bg.no_tone=noTone
bg.xcj_motor_backward=motor shield <br> backward
bg.xcj_motor_forward=motor shield <br> forward
bg.xcj_ms_digital_read=Xinchejian digitalRead
bg.xcj_ms_digital_write=Xinchejian digitalWrite
ardublock.file.suffix=ArduBlock Program File(*.abp)
ardublock.file.suffix=ArduBlock Program File(*.abp)

ardublock.ui.save=Save
ardublock.ui.saveas=Save as ...
ardublock.ui.load=Load
ardublock.ui.upload=Upload
ardublock.ui.clone=Clone
ardublock.ui.add_comment=Add Comment
ardublock.ui.delete_comment=Delete Comment
ardublock.ui.organize_blocks=Organize all blocks

message.title.error=Error
message.title.question=Question
message.content.open_unsaved=ArduBlock program changed, do you want to save?
message.content.overwrite=Do you want overwrite existed file?
message.file_not_found=File Not Found or Permission Denied
