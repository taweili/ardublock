bc.start=start
bg.repeat_control=repeat between
bg.repeat_control.description=Repeat the commands with "variable" ranging between "start" and "stop" values. "variable" changes by "increment" after each repetition
bc.end=stop
bc.increment=steps of
bg.constrain=constrain
bc.low=lower
bc.high=higher
bg.sd_write2=write to SD
bg.sd_write=SD flash write
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=read 'byte' EEPROM
bg.eeprom_write=write 'byte' EEPROM
bg.eeprom_read_int=read number from EEPROM
bg.eeprom_write_int=write number to EEPROM
bg.eeprom_read_long=read 'long' from EEPROM
bg.eeprom_write_long=write 'long' to EEPROM
bd.storage=Storage
bc.device_address=device address
bc.device_address_I2C=address 0x
bc.register_address=register address
bc.watchdog_enable=enable
bc.eeprom_address=address
bc.eeprom_data=data
bc.ln=new line
bc.message=message2
bc.print=print
bc.line_number=line#
bc.character_number=char#


bg.variable_poly=char variable name
bg.setter_variable_char=set char variable
bg.char=A
bd.chars= Chars Test
bg.not_equal_poly= !=
bg.equal_poly= ==
bg.glue_poly=glue
bg.serial_read_poly=serial read
bg.serial_available=serial data available
bg.program=program
bc.setup=setup
bc.loop=loop
bg.setup=setup
bc.par=input
bc.vecsize=size
bc.num=#
bg.variable_fake=fake
bg.fake=fake
bg.variable_vector=array variable name
bc.position=position
bg.create_variable_vector=create an array
bg.setter_variable_vector=set an array member

bg.code_head=add code on Head
bg.code_setup=add code on Setup
bg.code_loop=add code on Loop
bg.serial_read=serial read
bd.especial=Especial
bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=repeat
bc.var=iteration variable name
bg.glue_msg=glue

# BlockDrawer name
bc.angle=angle
bc.base=base
bc.condition=test
bc.else=else
bc.exponent=exponent
bc.from=from
bc.level=level
bc.max=max
bc.min=min
bc.microseconds=microseconds
bc.milliseconds=milliseconds
# BlockConnector label
bc.pin_number=pin#
bc.status=status
bc.test=test
bc.then=then
bc.to=to
bc.value=value
bc.variable=variable
bc.frequency=frequency
bc.do=do
bc.device_address=device address
bc.register_address=register address
bc.watchdog_enable=Enable
bc.eeprom_address=address
bc.eeprom_data=data
bc.motor_channel=motor channel
bc.motor_speed=motor speed

bd.control=Control
bd.dfrobot=DFRobot
bd.number=Variables/Constants
bd.operators=Math Operators
bd.pins=Pins
bd.seeedstudio=Seeed Studio Grove

bd.communication=Communication
bd.storage=Storage

#linksprite
bd.linksprite_LinkerKit=Linker Kit

bd.tinkerkit=TinkerKit
bd.utilities=Generic Hardware
# BlockGenus initlabel
bg.df_lcd_keypad=DFRobot LCD Keypad
bg.Tinker_Accmeter=Accelerometer
bg.Tinker_Button=Button
bg.Tinker_Hall=Hall
bg.Tinker_I0=I0
bg.Tinker_I1=I1
bg.Tinker_I2=I2
bg.Tinker_I3=I3
bg.Tinker_I4=I4
bg.Tinker_I5=I5
bg.Tinker_LDR=LDR
bg.Tinker_LED=LED
bg.Tinker_LED_pwm=LED
bg.Tinker_LinearPotentiometer=LinearPotentiometer
bg.Tinker_Mosfet=Mosfet
bg.Tinker_Mosfet_pwm=Mosfet
bg.Tinker_O0=O0
bg.Tinker_O1=O1
bg.Tinker_O2=O2
bg.Tinker_O3=O3
bg.Tinker_O4=O4
bg.Tinker_O5=O5
bg.Tinker_Relay=Relay
bg.Tinker_RotaryPotentiometer=RotaryPotentiometer
bg.Tinker_Servo=Servo
bg.Tinker_Thermistor=Thermistor
bg.Tinker_Tilt=Tilt
bg.Tinker_Touch=Touch
bg.abs=abs
bg.addition=+
bg.and=and
bg.cos=cos
bg.delay=delay MILLIS
bg.delay_microseconds=delay MICROS
bg.df_360_degree_rotation_motor=360 degree rotation motor
bg.df_adjustable_infrared_sensor_switch=Adjustable Infrared Sensor Switch
bg.df_analog_ambient_light_sensor=Analog Ambient Light Sensor
bg.df_analog_gas_sensor=Analog Gas Sensor
bg.df_analog_grayscale_sensor=Analog Grayscale Senor
bg.df_analog_rotation_sensor_v1=Analog Rotation Sensor V1
bg.df_analog_rotation_sensor_v2=Analog Rotation Sensor V2
bg.df_analog_sound_sensor=Analog Sound Sensor
bg.df_analog_volume_sensor=Analog Sound Volume Sensor
bg.df_capacitive_touch_sensor=Capacitive Touch Sensor
bg.df_digital_infrared_motion_sensor=Digital Infrared Motion Sensor
bg.df_digital_ir_receiver_module=Digital IR Receiver Module
bg.df_digital_push_button=Digital Push Button
bg.df_digital_viberation_sensor=Digital Vibration Sensor
bg.df_flame_sensor=Flame Sensor
bg.df_joystick_module_button=JoyStick Module Button
bg.df_joystick_module_x=Joystick Module (Axis-X)
bg.df_joystick_module_y=Joystick Module (Axis-Y)
bg.df_led=LED Module
bg.df_led_pwm=LED with brightness
bg.df_line_tracking_sensor=Line Tracking Sensor
bg.df_mma7260_x=Triple Axis Accelerometer MMA7260 (Axis-X)
bg.df_mma7260_y=Triple Axis Accelerometer MMA7260 (Axis-Y)
bg.df_mma7260_z=Triple Axis Accelerometer MMA7260 (Axis-Z)
bg.df_piranha_led=piranha LED Module
bg.df_piranha_led_pwm=piranha LED with brightness
bg.df_pizeo_disk_vibration_sensor=Piezo Disk Vibration Sensor
bg.df_relay=Relay
bg.df_servo=Servo
bg.df_temperature_sensor=Temperature Sensor
bg.df_buzzer=Buzzer
bg.df_buzzer_tone=Buzzer
bg.df_buzzer_tone_delay=Buzzer

bg.df_digital_tilt_sensor=Digital Tilt Sensor
bg.df_digital_magnetic_sensor=Digital Magnetic Sensor
bg.df_analog_co_sensor=Analog Carbon Monoxide Sensor
bg.df_analog_voltage_divider=Analog Voltage Divider
bg.df_analog_mma7361_x=X-Asix of Accelerometer
bg.df_analog_mma7361_y=Y-Asix of Accelerometer
bg.df_analog_mma7361_z=Z-Asix of Accelerometer
bg.df_analog_gp2y0a21=Sharp GP2Y0A21 Distance Sensor
bg.df_analog_moisture=Soil Moisture Sensor
bg.df_lcd_keypad=LCD Keypad

bg.digital-high=HIGH
bg.digital-low=LOW
bg.digital-off=OFF
bg.digital-on=ON
bg.division=\u00f7
bg.equal===
bg.false=FALSE
bg.glue_sb=glue
bg.glue_sn=glue
bg.dummy=dummy
bg.greater=>
bg.greater_equal=>=
bg.if=if
bg.ifelse=if/else
bg.less=<
bg.less_equal=<=
bg.loop=loop
bg.subroutine=subroutine
bg.subroutine-ref=subroutine
bg.map=map
bg.map_common=map [0, 1024] to [0, 255]
bg.max=max
bg.message=message
bg.millis=millis
bg.min=min
bg.modulo=%
bg.multiplication=x
bg.not=not
bg.not_equal=!=
bg.char=A
bg.number=1
bg.number_long=1000000
bg.number_double=3.1415927
bg.number-single=1
bg.number-single-I2C-address=3F
bg.number-single-fixed-parallel=Parallel
bg.or=or
bg.pin-read-analog=analog pin
bg.pin-read-digital=digital pin
bg.pin-read-digital-pullup=input pullup
bg.pin-write-analog=set analog pin
bg.pin-write-digital=set digital pin
bg.pow=power
bg.random=random
bg.repeat_times=repeat
bg.seeed_joystick=Grove Thumb Joystick
bg.seeed_joystick_button=Grove Thumb Joystick Button
bg.watchdog_15ms=WDTO_15MS
bg.watchdog_30ms=WDTO_30MS
bg.watchdog_60ms=WDTO_60MS
bg.watchdog_120ms=WDTO_120MS
bg.watchdog_250ms=WDTO_250MS
bg.watchdog_500ms=WDTO_500MS
bg.watchdog_1s=WDTO_1S
bg.watchdog_2s=WDTO_2S
bg.watchdog_4s=WDTO_4S
bg.watchdog_8s=WDTO_8S
bg.watchdog_setup=Watchdog
bg.watchdog_reset=Watchdog Reset
bg.sd_write=SD flash write
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=read byte from EEPROM
bg.eeprom_write=write byte to EEPROM
bg.random_range=random


#linksprite
bg.ls_10mmLEDModule=10mm Blue/Green/Yellow/Red LED Module
bg.ls_5mmLEDModule=5mm Blue/Green/Yellow/Red LED Module
bg.ls_AccelerometerModule_x=Accelerometer Module (x-Achse)
bg.ls_AccelerometerModule_y=Accelerometer Module (y-Achse)
bg.ls_AccelerometerModule_z=Accelerometer Module (z-Achse)
bg.ls_ButtonModule=Button Module
bg.ls_BuzzerModule=Buzzer Module
bg.ls_HallSensor=Hall Sensor
bg.ls_HighPowerLedModule=High Power Led Module
bg.ls_JoystickSensorModule_x=Joystick Sensor Module (x-Achse)
bg.ls_JoystickSensorModule_y=Joystick Sensor Module (y-Achse)
bg.ls_LDRModule=LDR Module
bg.ls_LEDBar=LED Bar
bg.ls_Linear-SlidePotentiometerModule=Linear/Slide Potentiometer Module
bg.ls_MagneticSwitch=Magnetic Switch
bg.ls_MosfetModule=Mosfet Module
bg.ls_RelayModule=Relay Module
bg.ls_RotaryPotentiometerModule=Rotary Potentiometer Module
bg.ls_RTCModule=RTC Module
bg.ls_SoundSensor=Sound Sensor
bg.ls_ThermalModule=Thermal Module
bg.ls_TiltModule=Tilt Module
bg.ls_TouchSensorModule=TouchSensor Module

bg.serial_println=serial println
bg.serial_print=serial print
bg.serial_read=serial read
bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=repeat and count
bg.glue_msg=glue message
bg.servo=Servo
bg.servo_prefix=Servo: 
bg.servo_default=Default
bg.servo_sg90=SG90
bg.servo_mg996r=MG996R
bg.setter_variable_digital=set digital variable
bg.setter_variable_number=set integer variable
bg.setter_variable_number_unsigned_long=set large integer variable
bg.setter_variable_number_double=set decimal number variable
bg.sin=sin
bg.sqrt=sqrt
bg.subtraction=-
bg.tan=tan
bg.true=TRUE
bg.ultrasonic=ultrasonic
bg.LCD_I2C_Sainsmart_20by4=20by4 I2C  Sainsmart
bg.LCD_I2C_Sainsmart_16by2=16by2 I2C  Sainsmart
bg.LCD_PLL_Sainsmart_16by2=16by2 PLL Sainsmart
bg.LCD_command_clear=CLEAR
bg.LCD_command_home=HOME
bg.LCD_command_lightOn=Light On
bg.LCD_command_lightOff=Light Off
bg.LCD_command_cursorOn= Cursor On
bg.LCD_command_cursorOff=Cursor Off
bg.LCD_command_blinkOn= Blink On
bg.LCD_command_blinkOff=Blink Off
bg.variable_digital=digital variable name
bg.variable_number=integer variable name
bg.variable_number_unsigned_long=Large integer variable name
bg.variable_number_double='Decimal' variable name
bg.while=while
bg.do_while=do while
bg.wire_isread=read I2C ok?
bg.wire_read=read from I2C
bg.wire_write=write to I2C
bg.wire_write_one_byte=I2C write 1
bg.tone=tone
bg.tone_time=tone
bg.no_tone=no tone
bg.xcj_motor_backward=motor shield backward
bg.xcj_motor_forward=motor shield forward
bg.xcj_ms_digital_read=Xinchejian digitalRead
bg.xcj_ms_digital_write=Xinchejian digitalWrite
bg.code_loop=loop
bg.code_head=head
bg.code_setup=setup

bd.logic=Tests
bd.communication=Communication
bd.especial=Code Blocks

bd.adafruit=Adafruit Motorshield
bg.ada_dc_motor_fwd=DC motor FORWARD
bg.ada_dc_motor_bwd=DC motor BACKWARD
bg.ada_dc_motor_release=DC motor RELEASE

ardublock.file.suffix=Ardublock Program File(*.abp)
ardublock.ui.new=New
ardublock.ui.save=Save
ardublock.ui.saveAs=Save As
ardublock.ui.load=Open
ardublock.ui.upload=Upload to Arduino
ardublock.ui.clone=Clone
ardublock.ui.add_comment=Add Comment
ardublock.ui.delete_comment=Delete Comment
ardublock.ui.organize_blocks=Organize all blocks
ardublock.ui.create_refer=create reference
ardublock.ui.website=Go to Web Site
ardublock.ui.serialMonitor=Serial Monitor
ardublock.ui.saveImage=Save as image...
ardublock.ui.version=20131031 (beta)

ardublock.error_msg.digital_var_slot=Digital variable slot must take a 'digital variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_var_slot=Standard variable slot must take a standard 'Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.long_number_var_slot=Large integer variable slot must take a 'Large Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.double_number_var_slot=variable slot must take a 'Decimal' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.char_var_slot=Char variable slot must take a char variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_var_slot='Array variable' slot must take an 'array variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_size_slot='Array size' slot must take a standard integer constant

ardublock.translator.exception.subroutineNameDuplicated=two or more subroutines have the same name!
ardublock.translator.exception.noLoopFound=No loop found!
ardublock.translator.exception.multipleLoopFound=multiple loop block found!
ardublock.translator.exception.socketNull=A required Value, Variable Name or 'Test' is missing.\nHint:: Look for an empty 'socket' in the highlighted block.
ardublock.translator.exception.subroutineNotDeclared=subroutine not declared

message.title.error=Error
message.title.question=Question
message.content.open_unsaved=Ardublock program has changed, do you want to save?
message.content.overwrite=Do you want overwrite existing file?
message.file_not_found=File Not Found or Permission Denied
message.question.newfile_on_workspace_changed=The program has changed, do you want to create a new Ardublock file?

bc.repeat_times=times

# Descriptions of all Block

bg.program.description=Main program with loop and setup
bg.loop.description=Main Program loop without setup
bg.delay.description=Delay for "milliseconds" indicated.\nNOTE: 1000 millis = 1 second
bg.if.description=Execute the commands if the "test" is true
bg.ifelse.description=Execute the first set of commands if the "test" is true, otherwise it will do the second set of commands.
bg.while.description=Execute the commands as long as the "test" is true
bg.do_while.description=Execute the list of commands. Then, if 'test' is true, keep on repeating it until 'test' is 'false'
bg.repeat_times.description=Repeat the commands. Stop after "times" repetitions.
bg.repeat.description=Repeat the commands. Stop after "times" repetitions. "variable" counts the repetitions. 
bg.subroutine.description=Add a subroutine
bg.subroutine-ref.description=Invoke subroutine
bg.delay_microseconds.description=Delay for "microseconds" indicated. \nNOTE: 1000000 micros = 1 second
bg.pin-read-analog.description=Read analog value from pin
bg.pin-read-digital.description=Read digital value from pin
bg.pin-read-digital-pullup.description=set digital pin with internal pullup
bg.pin-write-digital.description=write digital to pin
bg.pin-write-analog.description=write analog to pin
bg.addition.description=Sum of two numbers
bg.subtraction.description=Difference of two numbers
bg.multiplication.description=Product of two numbers
bg.division.description=Quotient of two numbers
bg.random.description=Generate a random number less than the number
bg.map_common.description=map value from [0, 1023] to [0, 255]
bg.map.description=Map value from "from" range to "to" range
bg.constrain.description=Constrain a number between two values
bg.dummy.description=
bg.greater.description=True if the first number is greater the second number
bg.less.description=True if the first number is less then the second number
bg.equal.description=True if the first number equals to the scond number
bg.equal_digital.description=True if the first number equals to the scond number
bg.greater_equal.description=True if the first number is greater or equal to the second number
bg.less_equal.description=True if the first number is less or equal to the second number
bg.not_equal.description=True if the first number is not equal to the second number
bg.not_equal_digital.description=True if the first number is not equal to the second number
bg.and.description=True if both of the two conditions are true.
bg.or.description=True if one or both of the two conditions are true.
bg.not.description=The opposite of
bg.equal_poly.description=True if first character is equal to the second character
bg.not_equal_poly.description=True if first character is not equal to the second character
bg.millis.description=milliseconds since last power-up or reset. Note: Use a 'Large Integer' variable.
bg.true.description=Boolean True.
bg.false.description=Boolean False.
bg.digital-high.description=Pin HIGH
bg.digital-low.description=Pin LOW
bg.char.description=Character constant
bg.number.description=Standard integer constant. 32,768 to +32,767
bg.number_long.description=Large integer constant. 0 to 4,294,967,295
bg.number_double.description='Decimal' number constant. +/- 3.4028235E+38
bg.variable_number.description=Standard integer variable. -32,768 to +32,767
bg.variable_number_unsigned_long.description=Large integer variable name
bg.variable_number_double.description='Decimal' variable name
bg.variable_digital.description=Digital variable
bg.setter_variable_number.description=Set standard integer variable. -32,768 to +32,767
bg.setter_variable_number_unsigned_long.description=Set large integer variable. 0 to 4,294,967,295
bg.setter_variable_number_double.description=Set 'Decimal' variable. +/- 3.4028235E+38
bg.setter_variable_digital.description=Set digital variable
bg.variable_vector.description=Get the value of an array member
bg.create_variable_vector.description=Create an array of standard integers. -32,768 to +32,767
bg.setter_variable_vector.description=Set the value of an array member
bg.setter_variable_char.description=Set a character variable
bg.variable_poly.description=Character variable name
bg.servo.description=Control a servo
bg.servo_sg90.description=Control an SG90 servo
bg.servo_mg996r.description=Control an MG996R servo
bg.servo_default.description=Control a servo
bg.ultrasonic.description=Ultrasonic distance sensor
bg.LCD_I2C_Sainsmart_20by4.description= Sainsmart LCD Display. I2C. 20 Char by 4 Lines
bg.LCD_I2C_Sainsmart_16by2.description= Sainsmart LCD Display. I2C. 16 Char by 2 Lines
bg.LCD_PLL_Sainsmart_16by2.description= Sainsmart LCD Display. Parallel. 16 Char by 2 Lines
bg.LCD_command_clear.description=Clear an LCD display
bg.LCD_command_home.description=LCD display home
bg.LCD_command_lightOn.description=LCD display light on.
bg.LCD_command_lightOff.description=LCD display light off
bg.LCD_command_cursorOn.description=LCD display cursor on.
bg.LCD_command_cursorOff.description=LCD display cursor off
bg.LCD_command_blinkOn.description=LCD display blink on.
bg.LCD_command_blinkOff.description=LCD display blink off
bg.tone.description=Generates a square wave of the specified frequency (and 50%	duty cycle) on a pin.
bg.tone_time.description=Generates a square wave of the specified frequency (and 50% duty cycle) on a pin.
bg.no_tone.description=Stops the generation of a square wave triggered by tone().
bg.serial_print.description=Send message via Serial port
bg.message.description=Text message
bg.glue_sn.description=Glue number to string
bg.glue_sb.description=Glue boolean to string
bg.glue_poly.description=Glue char to string
bg.wire_write.description=Write data via I2C
bg.wire_read.description=Read data from i2c
bg.wire_isread.description=Is last read from I2C success?
bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_write.description=Write a byte (0-255) to EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_read_int.description=Read an int (+/- 32,767) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_write_int.description=Write an int (+/- 32,767) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_read_long.description=Read a 'long' (0 - 4,294,967,295) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.eeprom_write_long.description=Write a 'long' (0 - 4,294,967,295) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.sd_write2.description=Write to SD card
bg.code_loop.description=Add raw codes to loop()
bg.code_head.description=Add raw codes to head
bg.code_setup.description=Add raw codes to setup()
bg.glue_msg.description=Glue a text message
bg.variable_fake.description=Digital Var				
bg.serial_println.description=Send message via Serial port with a return
bg.Tinker_LED.description=TinkerKit LED
bg.Tinker_LED_pwm.description=TinkerKit LED
bg.Tinker_Mosfet.description=TinkerKit Mosfet
bg.Tinker_Mosfet_pwm.description=TinkerKit Mosfet
bg.Tinker_Relay.description=TinkerKit Relay
bg.Tinker_Servo.description=TinkerKit Servo
bg.Tinker_Button.description=TinkerKit Button
bg.Tinker_Accmeter.description=TinkerKit Accelerometer
bg.Tinker_Hall.description=TinkerKit Hall Sensor
bg.Tinker_LDR.description=TinkerKit LDR
bg.Tinker_LinearPotentiometer.description=TinkerKit Accelerometer
bg.Tinker_RotaryPotentiometer.description=TinkerKit RotaryPotentiometer
bg.Tinker_Thermistor.description=TinkerKit Thermistor
bg.Tinker_Touch.description=TinkerKit Touch Sensor
bg.Tinker_Servo.description=TinkerKit Servo
bg.Tinker_Tilt.description=TinkerKit Tilt
bg.xcj_motor_forward.description=forward
bg.xcj_motor_backward.description=Moving the car backward
bg.xcj_ms_digital_write.description=Write digital signal to Socket
bg.xcj_ms_digital_read.description=Read digital status from socket
bg.df_pizeo_disk_vibration_sensor.description=Vibration Sensor buffers a piezoelectric transducer that responds to strain changes by generating a measurable output	voltage change which is proportional to the strength of vibration.
bg.df_analog_ambient_light_sensor.description=The ambient light sensor detects light density.  
bg.df_analog_grayscale_sensor.description=Analog Grayscale Sensor detect the grayscale.
bg.df_flame_sensor.description=Read analog value from pin
bg.df_analog_mma7361_x.description=Read analog value from pin
bg.df_analog_mma7361_y.description=Read analog value from pin
bg.df_analog_mma7361_z.description=Read analog value from pin
bg.df_analog_gp2y0a21.description=Read analog value from pin
bg.df_analog_moisture.description=Read analog value from pin
bg.df_temperature_sensor.description=Read analog value from pin
bg.df_joystick_module_x.description=Read analog value from pin
bg.df_joystick_module_y.description=Read analog value from pin
bg.df_mma7260_x.description=Read analog value from pin
bg.df_mma7260_y.description=Read analog value from pin
bg.df_mma7260_z.description=Read analog value from pin
bg.df_analog_rotation_sensor_v1.description=Read analog value from pin
bg.df_analog_rotation_sensor_v2.description=Read analog value from pin
bg.df_analog_sound_sensor.description=Read analog value from pin
bg.df_analog_volume_sensor.description=Read analog value from pin
bg.df_analog_gas_sensor.description=Read analog value from pin
bg.df_analog_co_sensor.description=Read analog value from pin
bg.df_analog_voltage_divider.description=Read analog value from pin
bg.df_servo.description=set a pin to pwm
bg.df_360_degree_rotation_motor.description=set a pin to pwm
bg.df_led.description=LED Module
bg.df_led_pwm.description=LED Module
bg.df_piranha_led.description=Piranha LED Module
bg.df_piranha_led_pwm.description=Pianha LED Module with brightness level
bg.df_relay.description=Relay Module
bg.df_buzzer.description=Buzzer Module
bg.df_buzzer_tone.description=Generates a square wave of the specified frequency (and 50% duty cycle) on a pin.
bg.df_buzzer_tone_delay.description=Generates a square wave of the specified frequency (and 50%	duty cycle) on a pin.
bg.df_lcd_keypad.description= lcd block that use liquicrystal
bg.seeed_joystick.description=Read analog value from analog pin
bg.seeed_joystick_button.description=Read analog value from analog pin
bg.seeed_o2_sensor=Gas Sensor(O2)
bg.seeed_uv_sensor=UV Sensor
bg.seeed_single_gyro=Single Axis Analog Gyro
bg.seeed_mq9_sensor=Gas Sensor(MQ9)
bg.seeed_mp3_sensor=Gas Sensor(MQ3)
bg.seeed_vib_sensor=Piezo Vibration Sensor
bg.seeed_loud_sensor=Loudness Sensor
bg.seeed_diff_amp=Differential Amplifier
bg.seeed_ir_temp_sensor=Infrared Temperature Sensor
bg.seeed_ir_proximity_sensor=80cm Infrared Proximity Sensor
bg.seeed_electricity_sensor=Electricity Sensor
bg.seeed_angle_sensor=Rotary Angle Sensor
bg.seeed_sound_sensor=Sound Sensor
bg.seeed_moisture_sensor=Moisture Sensor
bg.seeed_temp_sensor=Sound Sensor

bg.seeed_voltage_divider=Voltage Divider
bg.seeed_flame_sensor=Flame Sensor
bg.seeed_button=Button
bg.seeed_switch=Switch
bg.seeed_ir_refl_sensor=Infrared Reflective Sensor
bg.seeed_heart_rate_sensor=Ear-clip Heart Rate Sensor
bg.seeed_chest_heart_sensor=Chest Strap Heart Rate Sensor
bg.seeed_air_quality_sensor=Air Quality Sensor
bg.seeed_line_finder=Line Finder
bg.seeed_pir_motion_sensor=PIR Motion Sensor
bg.seeed_tilt_switch=Tilt Switch
bg.seeed_push_button=Button
bg.seeed_water_sensor=Water Sensor
bg.seeed_touch_sensor=Touch Sensor
bg.seeed_mag_switch=Magnetic Switch
bg.seeed_ir_dist_int=IR Distance Interrupter

bg.seeed_circle_led=SPDT Relay(30A)
bg.seeed_2coil_relay=2-Coil Latching Relay
bg.seeed_dry_relay=Dry-Reed Relay
bg.seeed_solid_relay=Solid State Relay
bg.seeed_circle_led=Circular LED
bg.seeed_led_strip=LED Strip Driver
bg.seeed_led=LED
bg.seeed_var_led=Variable Color LED
bg.seeed_vib=Vibration Motor
bg.seeed_relay=Relay

bg.seeed_o2_sensor.description=Grove-Gas Sensor (O\u2082) is a kind of sensor to test the oxygen concentration in air, which is based on the principle of the electrochemical cell to the original work. 
bg.seeed_uv_sensor.description=\u2013 UV Sensor is used for detecting the intensity of incident ultraviolet(UV) radiation. 
bg.seeed_single_gyro.description=Signal Axis Analog Gyro is based on an angular velocity sensor that uses the phenomenon of Coriolis force. 
bg.seeed_mq9_sensor.description=Gas Sensor module is useful for gas leakage detecting(in home and industry). It can detect LPG, i-butane, methane, alcohol, Hydrogen, somke and so on. 
bg.seeed_mp3_sensor.description=Gas Sensor module is useful for gas leakage detecting(in home and industry). It can detect LPG, i-butane, methane, alcohol, Hydrogen, somke and so on. 
bg.seeed_vib_sensor.description=Piezo Vibration Sensor is suitable for measurements of flexibility, vibration, impact and touch. 
bg.seeed_loud_sensor.description=Loudness Sensor is designed to detect the loudness of environmental sound. Based on amplifier LM2904 and a built-in microphone, it amplifies and filters the high frequency signal that received from the microphone, and outputs a positive envelop. 
bg.seeed_diff_amp.description=It's designed for precise differential-input amplification
bg.seeed_ir_temp_sensor.description=The Infrared temperature sensor is a non-contact temperature measure model.
bg.seeed_ir_proximity_sensor.description=The 80cm Infrared Proximity Sensor is a General Purpose Type Distance Measuring Sensors, this sensor takes a continuous distance reading and returns a corresponding analog voltage with a range of 10cm (4") to 80cm (30").
bg.seeed_electricity_sensor.description=The Electricity sensor module is based on the TA12-200 current transformer which can change large alternating current into a small amplitude. 
bg.seeed_angle_sensor.description=The potentiometer twig produces analog output between 0 and Vcc (5V DC with Seeeduino) on its D1 connector.
bg.seeed_sound_sensor.description=The Sound sensor module is a simple microphone. 
bg.seeed_moisture_sensor.description=This Moisture Sensor can be used to detect the moisture of soil or judge if there is water around the sensor, let the plants in your garden reach out for human help. 
bg.seeed_temp_sensor.description=The temperature sensor uses a thermistor which returns the ambient temperature in the form of a resistance value, which is then used to alter Vcc (5V with our Seeeduinos). 

bg.seeed_voltage_divider.description=Voltage Divider provides an interface for measuring external voltage, eliminating the need to connect a resistance to input interface.
bg.seeed_flame_sensor.description=Flame Sensor can be used to detect fire source or other light sources of the wavelength in the range of 760nm - 1100 nm.
bg.seeed_button.description=Button
bg.seeed_switch.description=Switch
bg.seeed_ir_refl_sensor.description=Infrared Reflective Sensor utilizes a RPR220 reflective photosensor module to detect color and distance.
bg.seeed_heart_rate_sensor.description=The heart rate measure kit can be used to monitor heart rate of patient and athlete.
bg.seeed_chest_heart_sensor.description=The heart rate measure kit can be used to monitor the heart rate of patients and athletes, meanwhile the result can be displayed on a screen via serial port and saved for analysis.
bg.seeed_air_quality_sensor.description=The sensor is designed for indoor air quality testing. The main gas detected is carbon monoxide, alcohol, acetone, thinner, formaldehyde and other slightly toxic gases.
bg.seeed_line_finder.description=Line finder is designed for line following robotic. It consists two parts - an IR emitting LED and an IR sensitive phototransistor. It can output digital signal to a microcontroller so the robot can reliably follow a black line on a white background, or vice versa.
bg.seeed_pir_motion_sensor.description=when anyone moves in its detecting range, the sensor outputs HIGH on its SIG pin.
bg.seeed_tilt_switch.description=The tilt-switch twig is the equivalent of a button, and is used as a digital input.
bg.seeed_push_button.description=Button
bg.seeed_water_sensor.description=This sensor works by having a series of exposed traces connected to ground and interlaced between the grounded traces are the sens traces. The sensor traces have a weak pull-up resistor of 1 M\u03a9. The resistor will pull the sensor trace value high until a drop of water shorts the sensor trace to the grounded trace.
bg.seeed_touch_sensor.description=It can detect the change in capacitance when a finger is near it.
bg.seeed_mag_switch.description=The magnetic switch is a wonder tool for designers who would like to turn a circuit on and off based on proximity.
bg.seeed_ir_dist_int.description=This IR Distance Interrupter features a high-sensitivity RFR-359F photoreflector to perform distance detection function.

bg.seeed_circle_led.description=The SPDT Relay(30A) is a high quality Single Pole Double Throw Relay(SPDT).
bg.seeed_2coil_relay.description=This module is based on 2-Coil Latching Relay.
bg.seeed_dry_relay.description=Grove-Dry-Reed Relay is a relay module which works through magnetizing the vibration reed via the current in the coils.
bg.seeed_solid_relay.description=Solid State Relay is a non-contact electronic switch module that has relay features.
bg.seeed_circle_led.description=it has a florid body with 24 controllable LEDs.
bg.seeed_led_strip.description=It can help you control the luminance of a single-color LED strip, as well as the color and the luminance of an RGB LED strip through Arduino or Seeeduino.
bg.seeed_led.description=LED is designed for the beginners of Arduino/Seeeduino to monitor controls from digital ports.
bg.seeed_var_led.description=When SIG pin is logic LOW, the RGB LED will show.
bg.seeed_vib.description=It is consist one coin type motor which is a Permanent Magnet coreless DC motor.
bg.seeed_relay.description=The Relay is a digital normally open switch that controls a relay capable of switching much higher voltages and currents than your normal Arduino boards.

bg.ls_10mmLEDModule.description=10mm Blue/Green/Yellow/Red LED Module
bg.ls_5mmLEDModule.description=5mm Blue/Green/Yellow/Red LED Module
bg.ls_AccelerometerModule_x.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_AccelerometerModule_y.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_AccelerometerModule_z.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_ButtonModule.description=Button Module
bg.ls_BuzzerModule.description=Buzzer Module
bg.ls_HallSensor.description=Hall Sensor
bg.ls_HighPowerLedModule.description=High Power Led Module
bg.ls_JoystickSensorModule_x.description=Joystick Sensor Module
bg.ls_JoystickSensorModule_y.description=Joystick Sensor Module
bg.ls_LDRModule.description=LDR Module
bg.ls_LEDBar.description=LED Bar
bg.ls_Linear-SlidePotentiometerModule.description=Linear/Slide Potentiometer Module
bg.ls_MagneticSwitch.description=Magnetic Switch
bg.ls_MosfetModule.description=Mosfet Module
bg.ls_RelayModule.description=Relay Module
bg.ls_RotaryPotentiometerModule.description=Rotary Potentiometer Module
bg.ls_RTCModule.description=RTC Module
bg.ls_SoundSensor.description=Sound Sensor
bg.ls_ThermalModule.description=Thermal Module
bg.ls_TiltModule.description=Tilt Module
bg.ls_TouchSensorModule.description=Touch Sensor Module
bg.random_range.description=Generate random number between min and (max - 1)

bg.panda_i1=panda I1
bg.panda_i2=panda I2
bg.panda_i3=panda I3
bg.panda_i4=panda I4
bg.panda_i5=panda I5
bg.panda_i6=panda I6

bg.panda_o1=panda O1
bg.panda_o2=panda O2
bg.panda_o3=panda O3
bg.panda_o4=panda O4
bg.panda_o5=panda O5
bg.panda_o6=panda O6

bd.network=Networking
bg.bleshield=BLE Shield
bg.bleshield.description=BLE Shield for Bluetooth Communication
bg.bleshield_available=BLE Shield Data Available?
bg.bleshield_read_poly=read from BLE Shield

bd.adafruit.description=Adafruit Motorshield
bg.ada_dc_motor_fwd.description=Adafruit DC motor FORWARD
bg.ada_dc_motor_bwd.description=Adafruit DC motor BACKWARD
bg.ada_dc_motor_release.description=Adafruit DC motor RELEASE

bd.makeblock=Makeblock
bc.shutter_state=Action
bc.port_number=PORT_#
bc.motor_number=M#
bc.command_number=Type
bc.speed_number=Speed
bc.acceleration_number=Acceler
bc.moveTo_number=MoveTo
bc.angle_number=Angle
bc.input_data=Data
bc.device_number=Device
bc.output_data=Data
bc.commands_data=Commands
bc.stepper_finish=Finish
bc.me_key_down=KeyDown
bc.me_key_up=KeyUp
bg.me_port_1=PORT 1
bg.me_port_1.description= Me Base Shield Port
bg.me_port_2=PORT 2
bg.me_port_3=PORT 3
bg.me_port_4=PORT 4
bg.me_port_5=PORT 5
bg.me_port_6=PORT 6
bg.me_port_7=PORT 7
bg.me_port_8=PORT 8
bg.me_motor_1=M1
bg.me_motor_1.description= Me Base Shield DC Motor Port
bg.me_motor_2=M2
bg.me_shutter_1=Shot On
bg.me_shutter_1.description= Me Shutter Action
bg.me_shutter_2=Shot Off
bg.me_shutter_3=Focus On
bg.me_shutter_4=Focus Off
bg.me_ultrasonic_sensor= 
bg.me_ultrasonic_sensor.description=return distance between Object to Sensor.
bg.me_linefinder= 
bg.me_linefinder.description=return 0-3 for Left And Right Side State.
bg.me_limitswitch= 
bg.me_limitswitch.description=It sends a signal to the controller when it is triggered. 
bg.me_shutter= 
bg.me_shutter.description=It sends a signal to the DSLR Camera for shot and focus.
bg.me_motordriver= 
bg.me_motordriver.description=Motor can use M1,M2,Port_1 and Port_2.
bg.me_servodriver= 
bg.me_servodriver.description=Servo can use Port_1 and Port_2,device can use 1 and 2.
bg.me_stepper_motor= 
bg.me_stepper_motor.description=Mini stepper motor driver base on A4988.Compatible with 4 and 6 wire stepper motors.
bg.me_infraredreceiver= 
bg.me_infraredreceiver.description=Receive Data from Infrared Controller
bg.me_bluetooth_read= 
bg.me_bluetooth_read.description=Bluetooth Read Byte Data
bg.me_bluetooth_write= 
bg.me_bluetooth_write.description=Bluetooth Write Byte Data
bg.me_bluetooth_commands = 
bg.me_bluetooth_commands.description=Commands Parser For Android App's Communication.  
bg.me_bluetooth_command = 
bg.me_bluetooth_command.description=return (0:module,1:device ID,2:mode,3:port,4:value)

#workshop blocks 
bd.workshop=Workshop template
bg.ws_setting=Setting
bg.ws_setting.description=setup a robot
bg.ws_go_forward=Go
bg.ws_go_forward.description=go forward
bg.ws_go_backward=Back
bg.ws_go_backward.description=go backward
bg.ws_stop=Stop
bg.ws_stop.description=stop moving
bg.ws_turn_left=Turn left
bg.ws_turn_left.description=turn left
bg.ws_turn_right=Turn Right
bg.ws_turn_right.description=turn right
bg.ws_go_forward_left=Go Left
bg.ws_go_forward_left.description=go forward left
bg.ws_go_forward_right=Go Right
bg.ws_go_forward_right.description=go forward right
bg.ws_go_backward_left=Back Left
bg.ws_go_backward_left.description=go back left
bg.ws_go_backward_right=Back Right
bg.ws_go_backward_right.description=go back right
bg.ws_light=Light
bg.ws_light.description=stop moving
bg.ws_scan=Scan
bg.ws_scan.description=Scan an obstacle
bg.ws_music=Music
bg.ws_music.description=play music
bg.ws_wireless=Wrieless
bg.ws_wireless.description=Wireless
bg.ws_danger=In Danger
bg.ws_danger.description=is robot in danger?
bg.ws_binoculars=Binoculars
bg.ws_binoculars.description=Binoculars

#InsectBot blocks
bd.insectbot=Insect Bot
bg.insectbot_get_distance=Distance
bg.insectbot_get_distance.description=get distance of obstacle in front of robot 
bg.insectbot_is_indanger=In Danger?
bg.insectbot_is_indanger.description=is robot in danger?
bg.insectbot_go_forward=Go Forward
bg.insectbot_go_forward.description=go forward
bg.insectbot_go_backright=go back right
bg.insectbot_go_backright.description=go back right
bg.insectbot_turn_left=turn left
bg.insectbot_turn_left.description=turn left
bg.insectbot_blink_led=blink 
bg.insectbot_blink_led.description=blink led

#legacy support
bg.loop1=loop
bg.loop1.description=loop
bg.loop2=loop
bg.loop2.description=loop
bg.loop3=loop
bg.loop3.description=loop
